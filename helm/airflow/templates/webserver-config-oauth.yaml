apiVersion: v1
kind: Secret
metadata:
  name: airflow-webserver-config
type: Opaque
stringData: 
    webserver_config.py: |
        {{ if and .Values.vnetPeered .Values.mainDeployment }}
            from airflow import configuration as conf
            from flask_appbuilder.security.manager import AUTH_OAUTH

            SQLALCHEMY_DATABASE_URI = conf.get("core", "SQL_ALCHEMY_CONN")

            AUTH_TYPE = AUTH_OAUTH

            # registration configs
            AUTH_USER_REGISTRATION = True  # allow users who are not already in the FAB DB to register
            AUTH_USER_REGISTRATION_ROLE = "Public"  # this role will be given in addition to any AUTH_ROLES_MAPPING
            AUTH_ROLES_SYNC_AT_LOGIN = True  # Checks roles on every login

            # a mapping from the values of `userinfo["role_keys"]` to a list of FAB roles
            AUTH_ROLES_MAPPING = {
                {{ .Values.airflow_viewer_group_name | quote }}: ["Viewer"],
                {{ .Values.airflow_user_group_name | quote }}: ["User"],
                {{ .Values.airflow_admin_group_name | quote }}: ["Admin"],
            }

            # the list of providers which the user can choose from
            OAUTH_PROVIDERS = [
                {
                    "name": "azure",
                    "icon": "fa-windows",
                    "token_key": "access_token",
                    "remote_app": {
                        "client_id": {{ .Values.airflow_oauth_spn_client_id | quote }},
                        "client_secret": {{ .Values.airflow_oauth_spn_client_secret | quote }},
                        "api_base_url": "https://login.microsoftonline.com/{{ .Values.airflow_tenant_id }}/oauth2",
                        "client_kwargs": {
                            "scope": "User.read name preferred_username email profile upn",
                            "resource": {{ .Values.airflow_oauth_spn_client_id | quote }},
                            # Optionally enforce signature JWT verification
                            "verify_signature": False
                        },
                        "request_token_url": None,
                        "access_token_url": "https://login.microsoftonline.com/{{ .Values.airflow_tenant_id }}/oauth2/token",
                        "authorize_url": "https://login.microsoftonline.com/{{ .Values.airflow_tenant_id }}/oauth2/authorize",
                    },
                },
            ]

            # note, this is only natively supported in `azure` and `okta` currently,
            # however, if you customize userinfo retrieval to include 'role_keys', this will work for other providers

            # force users to re-auth after 30min of inactivity (to keep roles in sync)
            PERMANENT_SESSION_LIFETIME = 1800
        {{ else }}
            from flask_appbuilder.security.manager import AUTH_DB

            # use embedded DB for auth
            AUTH_TYPE = AUTH_DB
        {{ end }}  
