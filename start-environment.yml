trigger: none

schedules:
- cron: '0 5 * * 1-5'
  displayName: Start
  always: true
  branches:
    include:
    - main

parameters:
  - name: environmentName
    displayName: Variable group name for environment to deploy
    type: string
    default: dev

variables:
  - group: ${{ parameters.environmentName }}
  - name: terraformVersion
    value: "1.5.0"
  - name: kubectlVersion
    value: "1.27.3"
  - name: helmVersion
    value: "3.12.1"
  - name: terraformResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-state
  - name: terraformSaName
    value: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)tfstate
  - name: terraformBackendContainerName
    value: $(terraform_in_environment_type)tfstate
  - name: mainKeyVaultName
    value: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main  
  - name: paasResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)
  - name: azureDevOpsPool
    value: ${{ parameters.environmentName }}-agentpool
  - name: aksDevOpsNamespace
    value: ${{ parameters.environmentName }}-agentpool
  - name: locationInfra
    value: $(terraform_in_location)
  - name: locationInfraShort
    value: $(terraform_in_location_short)
  - name: enablersModule
    value: enablers
  - name: infrastructureModule
    value: infrastructure
  - name: contentModule
    value: content    
  - name: sourceInfrastructureModule
    value: pair_infrastructure
  - name: databricksAirflowPatTokenName
    value: 'airflowdbwpattoken'
  - name: masterKeyVaultName
    value: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-master 
  - name: mainResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)
  - name: aksDevOpsClusterName
    value: aks-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)-devops-agents
  - name: azureDevOpsUrl
    value: "https://dev.azure.com/intrum-catalyst"
  - name: publicPoolName
    value: ubuntu-latest    

stages:
- stage: Start_env
  displayName: Start environment
  pool: 
    vmImage: ubuntu-latest
  jobs:
    - job: Start_env
      displayName: Start environments
      steps:
      - template: azure_pipelines/templates/azcli/sa-update-public-network-access.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          resourceGroupName:  ${{ variables.terraformResourceGroupName }}
          workingDirectory: $(System.DefaultWorkingDirectory)
          saName: ${{ variables.terraformSaName }}
          publicAccess: Enabled
          waitAfterUpdate: true

      - template: azure_pipelines/templates/terraform-outputs.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/enablers
          terraformVersion: ${{ variables.terraformVersion }}
          terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
          terraformSaName: ${{ variables.terraformSaName }}
          terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}  

      - template: azure_pipelines/templates/azcli/sa-update-public-network-access.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          resourceGroupName:  ${{ variables.terraformResourceGroupName }}
          workingDirectory: $(System.DefaultWorkingDirectory)
          saName: ${{ variables.terraformSaName }}
          publicAccess: Disabled
          waitAfterUpdate: false
          condition: or (always(), canceled())              

      - template: azure_pipelines/templates/azcli/aks-environment-stop-start.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          aksClusterName: $(terraform_out_aks_devops_name)
          aksClusterResourceGroup: $(terraform_out_resource_group_name)
          workingDirectory: $(System.DefaultWorkingDirectory)
          action: start 

- stage: Start_env_from_local_aks
  displayName: Start environment from local
  pool: 
    name: ${{ variables.azureDevOpsPool }}
  jobs:
    - job:
      displayName: Start environments from local
      steps:    
      - template: azure_pipelines/templates/terraform-outputs.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform/infrastructure
          terraformVersion: ${{ variables.terraformVersion }}
          terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
          terraformSaName: ${{ variables.terraformSaName }}
          terraformBackendContainerName: ${{ variables.terraformBackendContainerName }} 

      - template: azure_pipelines/templates/azcli/psql-stop-start.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          psqlName: $(terraform_out_psql_server_name)
          resourceGroup: $(paasResourceGroupName)
          workingDirectory: $(System.DefaultWorkingDirectory)
          action: start       

      - template: azure_pipelines/templates/azcli/aks-environment-stop-start.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          aksClusterName: $(terraform_out_aks_cluster_name_main)
          aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
          workingDirectory: $(System.DefaultWorkingDirectory)
          action: start
            
- template: azure_pipelines/provision-enablers-stages.yml
  parameters:
    stageName: provision_enablers
    azureServiceConnectionName: $(azure_service_principal_name)
    terraformVersion: ${{ variables.terraformVersion }}
    terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    terraformSaName: ${{ variables.terraformSaName }}
    terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    acrRepositoryName: $(source_acr_devops_agent_repo)
    acrRepositoryVersion: $(source_acr_devops_agent_version)
    enablersModule: ${{ variables.enablersModule }}
    aksDevOpsNamespace: ${{ variables.aksDevOpsNamespace }} 
    azureDevOpsPool: ${{ variables.azureDevOpsPool }} 
    azureDevOpsUrl: ${{ variables.azureDevOpsUrl }}
    agentsReplicas: $(devops_agents_replicas)
    keyVaultName: ${{ variables.masterKeyVaultName }}
    kubectlVersion: ${{ variables.kubectlVersion }}
    helmVersion: ${{ variables.helmVersion }}
    calicoVersion: $(calico_version)
    calicoNamespace: $(calico_namespace)
    osmVersion: $(osm_version)
    osmNamespace: $(osm_namespace)
    pool: ${{ variables.publicPoolName }}
    dependsOn:
      - Start_env_from_local_aks

- template: azure_pipelines/acr-sync-stage.yml
  parameters:
    useDocker: false
    stageNameSuffix: _on_private_agent
    pool: ${{ variables.azureDevOpsPool }} 
    sourceAzureServiceConnectionName: $(source_acr_service_principal_name)
    targetAzureServiceConnectionName: $(azure_service_principal_name)
    terraformVersion: ${{ variables.terraformVersion }}
    terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    terraformSaName: ${{ variables.terraformSaName }}
    terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    sourceAcrName: $(source_acr_name)
    sourceAcrRg: $(source_acr_rg)
    sourceAcrSubscriptionId: $(source_acr_subscription_id)
    paasResourceGroupName: ${{ variables.paasResourceGroupName }}
    enablersModule: enablers
    imageNames:
      - "$(source_acr_devops_agent_repo):$(source_acr_devops_agent_version)"
      - images/ingress-nginx/controller:$(ingress_nginx_tag)
      - images/ingress-nginx/kube-webhook-certgen:$(kube_webhook_certgen_tag)
      # - images/vertica/verticadb-operator:$(vertica_operator_tag)
      # - images/vertica/vertica-k8s:$(vertica_tag)
      - images/airflow:$(airflow_tag)
      - images/envoy-sidecar-helper:$(envoy_helper_tag)
      - images/buildkit:$(buildx_tag)
    saPublicAccessUpdate: false
    dependsOn:
      - provision_enablers           

- template: azure_pipelines/provision-infrastructure-stages.yml
  parameters:
    environmentName: ${{ parameters.environmentName }}
    pool: ${{ variables.azureDevOpsPool }} 
    azureServiceConnectionName: $(azure_service_principal_name)
    terraformVersion: ${{ variables.terraformVersion }}
    kubectlVersion: ${{ variables.kubectlVersion }}
    helmVersion: ${{ variables.helmVersion }}
    calicoVersion: $(calico_version)
    calicoNamespace: $(calico_namespace)
    osmVersion: $(osm_version)
    osmNamespace: $(osm_namespace)
    ingressNamespace: $(ingress_namespace)
    ingressHelmReleaseName: $(ingress_helm_release_name)
    ingressClientCertSecretName: $(osm_ingress_client_cert_secret_name)
    ingressVersion: $(ingress_nginx_tag) 
    kubeWebhookCertgenVersion: $(kube_webhook_certgen_tag)
    terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    terraformSaName: ${{ variables.terraformSaName }}
    terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    saPublicAccessUpdate: false
    enablersModule: enablers
    infrastructureModule: infrastructure
    keyVaultName: ${{ variables.mainKeyVaultName }}
    keyVaultSecretNames: 
      - psqladminuser
      - psqladminpwd
      - psqlairflowuser
      - psqlairflowpwd          
    dependsOn:
      - acr_sync_on_private_agent

# - template: azure_pipelines/vertica-stages.yml
#   parameters:
#     pool: ${{ variables.azureDevOpsPool }} 
#     azureServiceConnectionName: $(azure_service_principal_name)
#     terraformVersion: ${{ variables.terraformVersion }}
#     kubectlVersion: ${{ variables.kubectlVersion }}
#     helmVersion: ${{ variables.helmVersion }}
#     helmReleaseName: $(vertica_helm_release_name)
#     helmNamespace: $(vertica_namespace)
#     airflowNamespace: $(airflow_namespace)
#     resourceGroupName: $(mainResourceGroupName)
#     dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
#     dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
#     terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
#     terraformSaName: ${{ variables.terraformSaName }}
#     terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
#     keyVaultName: ${{ variables.mainKeyVaultName }}
#     keyVaultSecretNames: 
#       - verticatlskey
#       - verticatlscrt
#       - verticatlscakey
#       - verticatlscacrt
#       - verticatlswebhookkey
#       - verticatlswebhookcrt
#       - verticasupassword
#       - saverticakey
#     saPublicAccessUpdate: false
#     verticaTag: $(vertica_tag)      
#     verticaLoggerTag: $(vertica_logger_tag)
#     verticaOperatorTag: $(vertica_operator_tag)         
#     enablersModule: enablers
#     infrastructureModule: infrastructure
#     dependsOn:
#       - provision_infrastructure   

- template: azure_pipelines/airflow-stages.yml
  parameters:
    pool: ${{ variables.azureDevOpsPool }} 
    azureServiceConnectionName: $(azure_service_principal_name)
    terraformVersion: ${{ variables.terraformVersion }}
    kubectlVersion: ${{ variables.kubectlVersion }}
    helmVersion: ${{ variables.helmVersion }}
    osmVersion: $(osm_version)
    dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
    dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
    resourceGroupName: ${{ variables.mainResourceGroupName }}    
    terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    terraformSaName: ${{ variables.terraformSaName }}
    terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    keyVaultName: ${{ variables.mainKeyVaultName }}
    keyVaultSecretNames:
      # - verticadbwritername
      # - verticadbwriterpassword   
      - airflowoauthspnclientid
      - airflowoauthspnclientsecret
      - airflowtenantid   
      - psqlairflowuser
      - psqlairflowpwd
      - airflowfernetkey
      - airflowpwd 
      - ${{ variables.databricksAirflowPatTokenName }}
      - saairflowkey
      - clienttlskey
      - clienttlscrt
      - airflowsmtpclientsecret
      - airflowsmtpclientid
    saPublicAccessUpdate: false
    airflowTag: $(airflow_tag)
    pgBouncerTag: $(pg_bouncer_tag)
    envoySidecarHelperTag: $(envoy_helper_tag)
    helmReleaseName: $(airflow_helm_release_name)
    helmNamespace: $(airflow_namespace)
    ingressControllerName: $(ingress_helm_release_name)
    ingressControllerNamespace: $(ingress_namespace)
    # verticaNamespace: $(vertica_namespace)
    enablersModule: enablers
    infrastructureModule: infrastructure
    contentModule: content
    databricksPatTokenName: ${{ variables.databricksAirflowPatTokenName }}
    airflowViewerGroupName: $(airflow_viewer_group_name)
    airflowUserGroupName: $(airflow_user_group_name)
    airflowAdminGroupName: $(airflow_admin_group_name)
    vnetPeered: $(terraform_in_vnet_peered)
    maxParallelDags: $(airflow_max_parallel_dags)
    maxConcurency: $(airflow_max_concurency)
    dependsOn:
      # - vertica_deployment 
      - provision_infrastructure          

- template: azure_pipelines/provision-enablers-stages.yml
  parameters:
    stageName: provision_enablers_agent_deploy
    azureServiceConnectionName: $(azure_service_principal_name)
    terraformVersion: ${{ variables.terraformVersion }}
    terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    terraformSaName: ${{ variables.terraformSaName }}
    terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    acrRepositoryName: $(source_acr_devops_agent_repo)
    acrRepositoryVersion: $(source_acr_devops_agent_version)
    enablersModule: ${{ variables.enablersModule }}
    aksDevOpsNamespace: ${{ variables.aksDevOpsNamespace }} 
    azureDevOpsPool: ${{ variables.azureDevOpsPool }} 
    azureDevOpsUrl: ${{ variables.azureDevOpsUrl }}
    agentsReplicas: $(devops_agents_replicas)
    keyVaultName: ${{ variables.masterKeyVaultName }}
    kubectlVersion: ${{ variables.kubectlVersion }}
    helmVersion: ${{ variables.helmVersion }}
    calicoVersion: $(calico_version)
    calicoNamespace: $(calico_namespace)
    osmVersion: $(osm_version)
    osmNamespace: $(osm_namespace)
    pool: ${{ variables.publicPoolName }}
    dependsOn:
      airflow_deployment          