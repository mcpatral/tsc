parameters:
  - name: environmentName
    displayName: Variable group name for environment to deploy
    type: string
  - name: deployLibraries
    displayName: Deploy libraries
    type: boolean
    default: true
  - name: deployNotebooks
    displayName: Deploy notebook
    type: boolean
    default: true
  - name: runNotebooks
    displayName: Run system initialization notebook with specified system id
    type: boolean
    default: false
  - name: notebookSystemIds
    displayName: 'Notebook system ids (example: 9999,7026 and etc.)'
    type: string
    default: '9999'
  - name: usePairInfrastructure
    displayName: Use Pair Infrastructure
    default: false
    type: boolean
  - name: initCommonTables
    type: boolean
    default: false
  - name: forceDelete
    type: boolean
    default: false

variables:
  - group: ${{ parameters.environmentName }}
  - name: terraformVersion
    value: "1.5.0"
  - name: terraformResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-state
  - name: terraformSaName
    value: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)tfstate
  - name: terraformBackendContainerName
    value: $(terraform_in_environment_type)tfstate
  - name: artifactsDirectoryPath
    value: 'artifacts'
  - name: databricksPackageUploadPath
    value: 'FileStore/wheels'
  # Databricks upload and run parameters notebooks
  - name: notebookName
    value: system_initialization
  - name: notebookLanguage
    value: 'python'
  - name: notebookFolder
    value: 'notebooks'
  - name: notebookLocalPath
    value: './${{ variables.notebookFolder }}/*'
  - name: databricksRemotePath
    value: '/Shared/'
  - name: notebookRequirementsPath
    value: 'shared-resources/requirements/python/notebooks/requirements.txt'
  - name: wheelsPackagesRemoteFileStore
    value: '/dbfs/FileStore/wheels/'
  - ${{ if eq(parameters.usePairInfrastructure, false) }}:
    - name: azureDevOpsPool
      value: ${{ parameters.environmentName }}-agentpool
    - name: locationInfraShort
      value: $(terraform_in_location_short)
  - ${{ if eq(parameters.usePairInfrastructure, true) }}:
    - name: azureDevOpsPool
      value: ${{ parameters.environmentName }}-pair-agentpool
    - name: locationInfraShort
      value: $(terraform_in_pair_location_short)
  - name: mainResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)
  - name: devopsRepositoryCheckout
    value: 'self'
  - name: sharedResourcesRepositoryCheckout
    value: 'shared-resources'
  # Databricks upload parameters libraries
  - name: csvFilePath
    value: 'shared-resources/libs_version/databricks_packages.csv'

resources:
  repositories:
  - repository: shared-resources
    type: git
    name: igtpoc/shared-resources
    ref: main

trigger: none

stages:
  - ${{ if eq(parameters.deployLibraries, true) }}:
    - template: azure_pipelines/databricks-upload-libraries-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        csvFilePath: ${{ variables.csvFilePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        artifactsDirectoryPath: ${{ variables.artifactsDirectoryPath }}
        databricksPackageUploadPath: ${{ variables.databricksPackageUploadPath }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        pool: ${{ variables.azureDevOpsPool }}

  - ${{ if eq(parameters.deployNotebooks, true) }}:
    - template: azure_pipelines/databricks-upload-notebooks-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        notebookLanguage: ${{ variables.notebookLanguage }}
        notebookFolder: ${{ variables.notebookFolder }}
        notebookLocalPath: ${{ variables.notebookLocalPath }}
        notebookRequirementsPath: ${{ variables.notebookRequirementsPath }}
        databricksRemotePath: ${{ variables.databricksRemotePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        workingDirectory: $(Build.SourcesDirectory)
        pool: ${{ variables.azureDevOpsPool }}

  - ${{ if eq(parameters.runNotebooks, true) }}:
    - template: azure_pipelines/databricks-run-notebooks-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        contentModule: ${{ variables.contentModule }}
        notebookName: ${{ variables.notebookName }}
        environmentName: $(terraform_in_environment_type)
        environmentNameUnityCatalogGroups: $(terraform_in_unity_catalog_environment_type)
        systemSchemaNames: $(terraform_in_databricks_schemas)
        storageAccountName: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)dl
        databricksRemotePath: ${{ variables.databricksRemotePath }}
        databricksViewerGroups: $(databricks_system_job_viewer_groups)
        wheelsPackagesRemoteFileStore: ${{ variables.wheelsPackagesRemoteFileStore }}
        wheelsCsvFile: ${{ variables.csvFilePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        pool: ${{ variables.azureDevOpsPool }}
        initCommonTables: ${{ parameters.initCommonTables }}
        forceDelete: ${{ parameters.forceDelete }}        
        condition: and(not(failed()), not(canceled()))
        dependsOn:
          - databricks_uploading_libraries
          - databricks_upload_notebook