# TODO include pair infrastructure in variables as in other pipelines.
parameters:
  - name: primaryEnvironmentName
    type: string
  - name: branchName
    type: string
  - name: createArtifact
    type: boolean
  - name: publishArtifact
    type: boolean
  - name: installDatabricksLib
    type: boolean
  - name: forcedReleaseType
    type: string
  - name: enviromentList
    type: object
    default: []

variables:
  - group: ${{ parameters.primaryEnvironmentName }}
  - name: artifactsDirectory
    value: 'artifacts'
  - name: devArtifactBuildCommand
    value: 'python3 setup.py bdist_wheel'
  - name: packageSuffix
    value: 'py3-none-any'
  - name: packageType
    value: 'whl'
  - name: pyTestsRequirementsPath
    value: 'devops/python/requirements_run_tests.txt'
  - name: pyBuildRequirementsPath
    value: 'devops/python/requirements_build.txt'
  - name: databricksPackageUploadPath
    value: '/FileStore/wheels/'
  - name: commitTag
    value: true
  - name: releaseTypeParameters
    ${{ if ne(parameters['forcedReleaseType'], 'automatic') }}:
      value: "--${{ parameters.forcedReleaseType }}"
  - name: azureDevOpsPool
    ${{ if eq(parameters.primaryEnvironmentName, 'demo') }}:
      value: ubuntu-latest
    ${{ else }}:
      value: "${{ parameters.primaryEnvironmentName }}-agentpool"
  
stages:
  - stage: RunTests
    condition: always()
    pool: 
      ${{ if eq(variables['azureDevOpsPool'], 'ubuntu-latest') }}:
        vmImage: ${{ variables.azureDevOpsPool }}
      ${{ else }}:
        name: ${{ variables.azureDevOpsPool }}
    jobs:
    - job: RunningTests
      steps:
      - template: azure_pipelines/templates/pytest-package.yml
        parameters:
          environmentName: ${{ parameters.primaryEnvironmentName }}
          branchName: ${{ parameters.branchName }}
          projectName: $(project_name)
          feedName: $(common_feed_name)
          pyTestsRequirementsPath: ${{ variables.pyTestsRequirementsPath }}
          workingDirectory: $(Build.SourcesDirectory)
      displayName: Running tests

  - stage: Build
    dependsOn: RunTests
    condition: |
      and(
        succeeded('RunTests'), 
        ${{ parameters.createArtifact }},
        ne(variables['Build.Reason'], 'PullRequest')
      )
    pool: 
      ${{ if eq(variables['azureDevOpsPool'], 'ubuntu-latest') }}:
        vmImage: ${{ variables.azureDevOpsPool }}
      ${{ else }}:
        name: ${{ variables.azureDevOpsPool }}
    jobs:
    - job: BuildArtifact
      workspace:
        clean: all
      steps:
      - template: azure_pipelines/templates/build-python-artifact-release.yml@devops
        parameters:
          branchName: ${{ parameters.branchName }}
          pyBuildRequirementsPath: ${{ variables.pyBuildRequirementsPath }}
          releaseAdditionalParameters: ${{ variables.releaseTypeParameters }} -D tag_commit=${{ variables.commitTag }} -D branch=${{ parameters.branchName }}
          buildCommand: ${{ variables.devArtifactBuildCommand }}
          packageSuffix: ${{ variables.packageSuffix }}
          packageType: ${{ variables.packageType }}
          artifactsDirectory: ${{ variables.artifactsDirectory }}
          workingDirectory: $(Build.SourcesDirectory)
      displayName: 'Build artifact'

  - stage: PublishFeed
    dependsOn: Build
    condition: and(succeeded('Build'), eq('${{ parameters.publishArtifact }}', 'true'))
    pool: 
      ${{ if eq(variables['azureDevOpsPool'], 'ubuntu-latest') }}:
        vmImage: ${{ variables.azureDevOpsPool }}
      ${{ else }}:
        name: ${{ variables.azureDevOpsPool }}
    jobs:
    - job:
      steps:
      - template: azure_pipelines/templates/publish-feed-whl.yml@devops
        parameters:
          feedServiceConnectionName: $(common_feed_service_principal_name)
          projectName: $(project_name)
          feedName: $(common_feed_name)
          artifactsDirectory: '${{ variables.artifactsDirectory }}'
          packageType: '${{ variables.packageType }}'
      displayName: 'Publish artifact to azure feed'

  - ${{ each environmentName in parameters.enviromentList }}:
    - stage: Uploading_libraries_databricks_${{ environmentName.key }}
      dependsOn: PublishFeed
      condition: and(succeeded('Build'), eq('${{ parameters.installDatabricksLib }}', 'true'))
      variables:
        - group: ${{ environmentName.key }}
        - name: databricksResourceGroup
          ${{ if eq(environmentName.key, 'demo') }}:
            value: $(databricks_resource_group)
          ${{ else }}:
            value: "rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)"
        - name: databricksWorkspace
          ${{ if eq(environmentName.key, 'demo') }}:
            value: $(databricks_workspace)
          ${{ else }}:
            value: "dbw-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)"
        - name: azureDevOpsPool
          ${{ if eq(environmentName.key, 'demo') }}:
            value: ubuntu-latest
          ${{ else }}:
            value: "${{ environmentName.key }}-agentpool"
      pool: 
        ${{ if eq(variables['azureDevOpsPool'], 'ubuntu-latest') }}:
          vmImage: ${{ variables.azureDevOpsPool }}
        ${{ else }}:
          name: ${{ environmentName.key }}-agentpool
      jobs:
      - job: Uploading_libraries_databricks
        steps:
          - template: azure_pipelines/templates/databricks/databricks-installation-and-login.yml
            parameters:
              azureServiceConnectionName: ${{ environmentName.value }}
              resourceGroupName: ${{ variables.databricksResourceGroup }}
              databricksWorkspaceName: ${{ variables.databricksWorkspace }}
          - task: DownloadBuildArtifacts@1
            inputs:
              buildType: 'current'
              artifactName: '${{ variables.artifactsDirectory }}'
              downloadPath: '$(System.ArtifactsDirectory)'
              itemPattern: '**/*.${{ variables.packageType }}'
          - template: azure_pipelines/templates/databricks/databricks-libraries-upload.yml
            parameters:
              azureServiceConnectionName: ${{ environmentName.value }}
              databricksPackageUploadPath: '${{ variables.databricksPackageUploadPath }}'
              artifactsDirectoryPath: '$(System.ArtifactsDirectory)/${{ variables.artifactsDirectory }}'
      displayName: 'Upload libraries and configure clusters'
