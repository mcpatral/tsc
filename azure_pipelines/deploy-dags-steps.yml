parameters:
  - name: azureServiceConnectionName
    type: string
  - name: terraformVersion
    type: string
  - name: terraformResourceGroupName
    displayName: Resource group for Terraform state of environment
    type: string
  - name: terraformSaName
    displayName: Storage Account name for Terraform state of environment
    type: string
  - name: terraformBackendContainerName
    displayName: SA Container name for Terraform state of environment
    type: string
  - name: infrastructureModule
    displayName: Infrastructure module name
    type: string
    default: infrastructure
  - name: pool
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: condition
    displayName: Condition to run the stage
    type: string
    default: ""

    #Auto deploy dags pipeline parameters
  - name: dagsRepositoryCheckout
    displayName: Dags repository to checkout
    type: string
    default: ''
  - name: devopsRepositoryCheckout
    displayName: Devops repository to checkout
    type: string
    default: ''
  - name: sharedResourcesRepositoryCheckout
    displayName: Shared resources repository to checkout
    type: string
    default: ''
  - name: dagsBranchName
    displayName: Dags branch name
    type: string
    default: ''
  - name: forcedReleaseType
    type: string
    default: ''
  - name: pyBuildRequirementsPath
    type: string
    default: 'devops/python/requirements_build.txt'
  - name: commitTag
    type: string
    default: true
  - name: devArtifactBuildCommand
    type: string
    default: 'python3 setup.py bdist_wheel'
  - name: packageSuffix
    type: string
    default: 'py3-none-any'  
  - name: packageType
    type: string
    default: 'whl'
  - name: artifactsDirectory
    type: string
    default: 'artifacts'

    # Deploy infra dags deployment parameters
  - name: dagsRequirementsPath
    type: string
    default: 'shared-resources/requirements/python/dags/airflow/requirements.txt' 

    #Common dags parameters
  - name: airflowDagsRepositoryFolder
    type: string
    default: 'airflow-dags'
  - name: packageFolder
    type: string
    default: 'dags'
  - name: publishAirflowDags
    type: boolean
    default: false
  - name: downloadAirflowDags
    type: boolean
    default: false
  - name: performReleaseCheckout
    type: boolean
    default: true
  - name: dagsStorageAccount
    type: string
  - name: dagsStorageAccountContainer
    type: string
    default: ""

stages:
  - stage: deploy_dags
    displayName: 'Deploy dags'
    dependsOn: ${{ parameters.dependsOn }}
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    variables:
    - name: releaseTypeParameters
      ${{ if ne(parameters['forcedReleaseType'], 'automatic')  }}:
        value: "--${{ parameters.forcedReleaseType }}"
    jobs:
      - job: deploy_dags
        displayName: 'Deploy dags'
        workspace:
          clean: all
        pool:
          ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
            vmImage: ${{ parameters.pool }}
          ${{ else }}:
            name: ${{ parameters.pool }}
        steps:
          - ${{ if eq(parameters.downloadAirflowDags, false) }}:
            - checkout: ${{ parameters.devopsRepositoryCheckout }}
              path: s/
            - checkout: ${{ parameters.dagsRepositoryCheckout }}
              fetchDepth: 0
              clean: true
              persistCredentials: true
              path: s/${{ parameters.airflowDagsRepositoryFolder }}

            - ${{ if parameters.performReleaseCheckout }}:
              - template: templates/git/checkout.yml
                parameters:
                  branchName: ${{ parameters.dagsBranchName }}
                  stepDisplayName: 'Switching to dags repositoiry branch name: ${{ parameters.dagsBranchName }}'
                  workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.airflowDagsRepositoryFolder }}
          
          - ${{ if parameters.publishAirflowDags }}:    
            - template: templates/build-python-artifact-release.yml
              parameters:
                branchName: ${{ parameters.dagsBranchName }}
                pyBuildRequirementsPath: ${{ parameters.pyBuildRequirementsPath }}
                releaseAdditionalParameters: ${{ variables.releaseTypeParameters }} -D tag_commit=${{ parameters.commitTag }} -D branch=${{ parameters.dagsBranchName }}
                buildCommand: ${{ parameters.devArtifactBuildCommand }}
                packageSuffix: ${{ parameters.packageSuffix }}
                packageType: ${{ parameters.packageType }}
                artifactsDirectory: ${{ parameters.artifactsDirectory }}
                workingDirectory: $(System.DefaultWorkingDirectory)/${{ parameters.airflowDagsRepositoryFolder }}

            - template: templates/publish-feed-whl.yml
              parameters:
                feedServiceConnectionName: $(common_feed_service_principal_name)
                projectName: $(project_name)
                feedName: $(common_feed_name)
                artifactsDirectory: '${{ parameters.artifactsDirectory }}'
                packageType: '${{ parameters.packageType }}'

          - ${{ if parameters.downloadAirflowDags }}:
            - checkout: ${{ parameters.devopsRepositoryCheckout }}
              path: s/.
            - checkout: ${{ parameters.sharedResourcesRepositoryCheckout }}
              path: s/${{ parameters.sharedResourcesRepositoryCheckout }}

            - task: Bash@3
              displayName: Removing existing dags directory
              inputs:
                targetType: 'inline'
                script: |
                  if [ -d ${{ parameters.airflowDagsRepositoryFolder }}/${{ parameters.packageFolder }} ]; then 
                     rm -rf ${{ parameters.airflowDagsRepositoryFolder }}/${{ parameters.packageFolder }};
                     ls -la ${{ parameters.airflowDagsRepositoryFolder }}
                  fi
                workingDirectory: $(System.DefaultWorkingDirectory)

            - template: templates/python/pip-authenticate.yml
              parameters:
                projectName: $(project_name)
                feedName: $(common_feed_name)

            - template: templates/python/pip-install-package.yml
              parameters:
                commandArgs: '-r $(System.DefaultWorkingDirectory)/${{ parameters.dagsRequirementsPath }} --target=$(System.DefaultWorkingDirectory)/${{ parameters.airflowDagsRepositoryFolder }}'

            - template: templates/utils/prepare-pip-packages.yml
              parameters:
                packageFolder: ${{ parameters.airflowDagsRepositoryFolder }}/${{ parameters.packageFolder }}
                workingDirectory: $(System.DefaultWorkingDirectory)

          - template: templates/terraform-outputs.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
              terraformSaName: ${{ parameters.terraformSaName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.infrastructureModule }}

          - template: templates/azcli/storage-container-generate-sas.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              storageAccountName: ${{ parameters.dagsStorageAccount }}
              ${{ if eq(parameters.dagsStorageAccountContainer, '') }}:
                containerName: "${{ parameters.packageFolder }}"
              ${{ else }}:
                containerName: ${{ parameters.dagsStorageAccountContainer }}
              permissions: "adclmrw"
              minutes: "1"
              sasStringVarName: "airflowtoken"
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.infrastructureModule }}

          - template: templates/azcli/azcopy-copy.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              source: "$(System.DefaultWorkingDirectory)/${{ parameters.airflowDagsRepositoryFolder }}/${{ parameters.packageFolder }}"
              ${{ if eq(parameters.dagsStorageAccountContainer, '') }}:
                destination: https://${{ parameters.dagsStorageAccount }}.blob.core.windows.net/${{ parameters.packageFolder }}/
              ${{ else }}:
                destination: https://${{ parameters.dagsStorageAccount }}.blob.core.windows.net/${{ parameters.dagsStorageAccountContainer }}/
              workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.infrastructureModule }}
              extraParameters: "--recursive --delete-destination=true"
              sasToken: $(airflowtoken)
