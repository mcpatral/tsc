parameters:
  - name: azureServiceConnectionName
    type: string
  - name: terraformVersion
    type: string
  - name: kubectlVersion
    type: string
  - name: helmVersion
    type: string
  - name: resourceGroupName
    displayName: Environment resource group name
    type: string
  - name: dnsZoneSubscriptionID
    displayName: Private DNS zone's for A records subscription ID
    type: string
  - name: dnsZoneResourceGroupName
    displayName: Private DNS Zone resource group name
    type: string
  - name: terraformResourceGroupName
    displayName: Resource group for Terraform state of environment
    type: string
  - name: terraformSaName
    displayName: Storage Account name for Terraform state of environment
    type: string
  - name: terraformBackendContainerName
    displayName: SA Container name for Terraform state of environment
    type: string
  - name: keyVaultName
    displayName: Key vault name
    type: string
  - name: keyVaultSecretNames
    displayName: Key vault secret names
    type: object
    default: 
      - verticatlskey
      - verticatlscrt
      - verticatlscakey
      - verticatlscacrt
      - verticatlswebhookkey
      - verticatlswebhookcrt
      - verticasupassword
      - saverticakey
  - name: saPublicAccessUpdate
    displayName: Storage Account Public Access Update
    type: boolean
  - name: enablersModule
    displayName: Enablers module name
    type: string
  - name: infrastructureModule
    displayName: Infrastructure module name
    type: string
  - name: operatorReleaseName
    displayName: Operator Release Name
    type: string
  - name: helmReleaseName
    displayName: Vertica DB Helm release name
    type: string
  - name: helmNamespace
    displayName: Vertica DB Helm release namespace
    type: string
  - name: airflowNamespace
    displayName: Airflow namespace
    type: string
  - name: rotateIpOnly
    displayName: Rotate Ip Only
    type: boolean
    default: false 
  - name: verticaTag
    displayName: version to deploy
  - name: verticaLoggerTag
    displayName: version to deploy for vertica logger
  - name: verticaOperatorTag
    displayName: version to deploy       

steps:
  - ${{ if parameters.saPublicAccessUpdate }}:
    - template: azcli/sa-update-public-network-access.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        saName: ${{ parameters.terraformSaName }}
        publicAccess: Enabled
        waitAfterUpdate: true

  - template: terraform-outputs.yml
    parameters:
      azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.enablersModule }}
      terraformVersion: ${{ parameters.terraformVersion }}
      terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
      terraformSaName: ${{ parameters.terraformSaName }}
      terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

  - template: terraform-outputs.yml
    parameters:
      azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
      workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.infrastructureModule }}
      terraformVersion: ${{ parameters.terraformVersion }}
      terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
      terraformSaName: ${{ parameters.terraformSaName }}
      terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

  - template: utils/get-ip-from-dns.yml
    parameters:
      dnsName: $(terraform_out_aks_cluster_fqdn_main)
      variableName: mainClusterApiIp
      workingDirectory: $(System.DefaultWorkingDirectory)

  - ${{ if parameters.saPublicAccessUpdate }}:  
    - template: utils/get-agent-ip.yml
      parameters:
        workingDirectory: $(System.DefaultWorkingDirectory)

    - template: azcli/aks-get-authorized-ips.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)

    - template: azcli/aks-update-authorized-ips.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
        authorizedIpRanges: $(baseRange),$(agentIp)
        waitAfterUpdate: true
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)

  - ${{ if not(parameters.rotateIpOnly) }}:
    - template: azcli/kv-get-secrets.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        keyVaultName: ${{ parameters.keyVaultName }}
        keyVaultSecretNames: ${{ parameters.keyVaultSecretNames }}

    - template: helm-steps.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
        acrName: $(terraform_out_acr_name_main)
        kubectlVersion: ${{ parameters.kubectlVersion }}
        helmVersion: ${{ parameters.helmVersion }}
        helmReleaseName: ${{ parameters.operatorReleaseName }}
        namespace: ${{ parameters.helmNamespace }}
        helmChartDirectory: $(System.DefaultWorkingDirectory)/helm/vertica-operator
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        installCrds: true
        downloadHelmDependencies: false
        pathToCrds: $(System.DefaultWorkingDirectory)/kubernetes/vertica-operator/crds
        skipAksLogon: false
        skipHelmInstall: false
        skipKubectlInstall: false
        helmChartValues: |
          verticadb-operator.image.repo=$(terraform_out_acr_name_main).azurecr.io
          verticadb-operator.rbac_proxy_image.repo=$(terraform_out_acr_name_main).azurecr.io
          verticadb-operator.image.name=images/vertica/verticadb-operator:${{ parameters.verticaOperatorTag }}
          operator.tls.key="$(verticatlswebhookkey)"
          operator.tls.crt="$(verticatlswebhookcrt)"
          operator.tls.ca.crt="$(verticatlscacrt)"
          verticadb-operator.webhook.caBundle="$(verticatlscacrt)"
          calico.cidrs.aks.pods=$(terraform_out_aks_cluster_pods_cidr_main)
          calico.cidrs.aks.externalApi=$(mainClusterApiIp)/32
          calico.cidrs.endpoints=$(terraform_out_private_endpoints_cidr)

    - template: utils/timeout.yml
      parameters:
        secondsToWait: "120" # Waiting to apply all certificates properly
        workingDirectory: $(System.DefaultWorkingDirectory)

    - template: helm-steps.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
        acrName: $(terraform_out_acr_name_main)
        kubectlVersion: ${{ parameters.kubectlVersion }}
        helmVersion: ${{ parameters.helmVersion }}
        helmReleaseName: ${{ parameters.helmReleaseName }}
        namespace: ${{ parameters.helmNamespace }}
        helmChartDirectory: $(System.DefaultWorkingDirectory)/helm/vertica
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        downloadHelmDependencies: false
        skipAksLogon: true
        skipHelmInstall: true
        skipKubectlInstall: true
        helmChartValues: |
          vertica.image.repo="$(terraform_out_acr_name_main).azurecr.io"
          vertica.image.tag=${{ parameters.verticaTag }}
          vertica.sidecars.vlogger.image.repo="$(terraform_out_acr_name_main).azurecr.io"
          vertica.sidecars.vlogger.image.tag=${{ parameters.verticaLoggerTag }}
          vertica.dbName="$(terraform_out_sa_container_vertica)"
          vertica.superUser.password="$(verticasupassword)"
          vertica.storageAccount.name="$(terraform_out_sa_name_vertica)"
          vertica.storageAccount.containerName="$(terraform_out_sa_container_vertica)"
          vertica.storageAccount.key="$(saverticakey)"
          vertica.storageAccount.endpoint="https://$(terraform_out_sa_name_vertica).privatelink.blob.core.windows.net"
          calico.cidrs.aks.nodes=$(terraform_out_aks_cluster_nodes_cidr_main)
          calico.cidrs.endpoints=$(terraform_out_private_endpoints_cidr)
          airflow.namespace=${{ parameters.airflowNamespace }}

    - template: utils/timeout.yml
      parameters:
        secondsToWait: "180" # Waiting for Service creation and external IP assignment
        workingDirectory: $(System.DefaultWorkingDirectory)

  - ${{ if parameters.rotateIpOnly }}:
    - template: azcli/aks-get-credentials.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_resource_group_name)
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)

  - template: kubectl/get-service-ips.yml
    parameters:
      serviceName: $(vertica_helm_release_name)-vertica-connections
      namespace: $(vertica_namespace)
      workingDirectory: $(System.DefaultWorkingDirectory)

  - template: rotate-a-dns-records-steps.yml
    parameters:
      azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
      aksResourceGroupName: ${{ parameters.resourceGroupName }}
      dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
      dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
      kubectlVersion: ${{ parameters.kubectlVersion }}
      skipAksLogon: true
      condition: and(not(failed()), not(canceled()))
      privateDns:
        - substring: internal_service
          name: $(terraform_out_private_dns_zone_name_intrum)
      aDnsRecords:
        - name: vertica
          fromPrivateEndpoint: false
          targetResourceSubstring: vertica
          ttl_seconds: 3600
          aksPreRotation: false
          aksPostRotation: false
          dnsSubstrings:
            - subresource: internal_service
              ipAddress: $(serviceExternalIp)

  - ${{ if parameters.saPublicAccessUpdate }}:
    - template: azcli/aks-update-authorized-ips.yml
      parameters:
        aksClusterName: $(terraform_out_aks_cluster_name_main)
        aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
        authorizedIpRanges: $(baseRange)
        waitAfterUpdate: false
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        condition: and(always(), eq(variables.updatedAksApi, 'true'))

  - template: azcli/sa-update-public-network-access.yml
    parameters:
      azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
      resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
      workingDirectory: $(System.DefaultWorkingDirectory)
      saName: ${{ parameters.terraformSaName }}
      publicAccess: Disabled
      waitAfterUpdate: false
      condition: or (always(), canceled())