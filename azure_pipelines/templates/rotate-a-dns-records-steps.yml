parameters:
- name: azureServiceConnectionName
  displayName: Azure Service Connection name
  type: string
- name: aksResourceGroupName
  displayName: AKS Cluster Resource Group Name
  type: string
  default: null
- name: dnsZoneSubscriptionID
  displayName: DNS Zone subscription ID
  type: string
- name: dnsZoneResourceGroupName
  displayName: DNS Zone Resource Group Name
  type: string
- name: privateEndpointResourceGroupName
  displayName: Private Endpoint Resource Group Name
  type: string
  default: null
- name: kubectlVersion
  displayName: Kubectl version
  type: string
  default: null
- name: privateDns
  displayName: Private Dns Names
  type: object
  default: []
- name: aDnsRecords
  displayName: Private Dns Records
  type: object
  default: []
- name: skipAksLogon
  displayName: Skip AKS logon steps
  type: boolean
  default: false
- name: condition
  displayName: Run conditions for task
  type: string
  default: true

steps:
- ${{ each dns in parameters.privateDns }}:
  - ${{ each aDnsRecord in parameters.aDnsRecords }}:
    - ${{ each dnsSubstring in aDnsRecord.dnsSubstrings }}:
      - ${{ if eq(dns.substring, dnsSubstring.subresource) }}:
        - ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'true') }}:
          - template: azcli/resource-show-property.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: $(System.DefaultWorkingDirectory)
              resourceGroupName: ${{ parameters.privateEndpointResourceGroupName }}
              ${{ if eq(aDnsRecord.usePrivateEndpointName, 'false') }}:
                resourceName: "pe-${{ aDnsRecord.name }}-${{ dns.substring }}"
              ${{ if eq(aDnsRecord.usePrivateEndpointName, 'true') }}:
                resourceName: ${{ aDnsRecord.privateEndpointName }}
              resourceType: "Microsoft.Network/privateEndpoints/privateLinkServiceConnections"
              stepNameSubstring: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
              condition: ${{ parameters.condition }}
              propertyAddress: id

          - template: azcli/network-private-endpoint-show.yml
            parameters:
              stepNameSuffix: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: $(System.DefaultWorkingDirectory)
              ${{ if eq(aDnsRecord.usePrivateEndpointName, 'false') }}:
                privateEndpointName: "pe-${{ aDnsRecord.name }}-${{ dns.substring }}"
              ${{ if ne(aDnsRecord.usePrivateEndpointName, 'false') }}:
                privateEndpointName: ${{ aDnsRecord.privateEndpointName }}
              aDnsRecordName: ${{ aDnsRecord.name }}
              fqdnSuffix: ${{ dnsSubstring.peFqdnSuffix }}
              resourceGroupName: ${{ parameters.privateEndpointResourceGroupName }}
              condition: and(not(eq(variables['resource_property'], '')), ${{ parameters.condition }})

        - ${{ if and(eq(aDnsRecord.fromPrivateEndpoint, 'false'), eq(aDnsRecord.aksPreRotation, 'true')) }}:
          - template: kubectl/kubectl-installer.yml
            parameters:
              kubectlVersion: ${{ parameters.kubectlVersion }}
              condition: and(${{ aDnsRecord.aksPreRotationCondition }}, ${{ parameters.condition }})

          - template: utils/get-agent-ip.yml
            parameters:
              workingDirectory: $(System.DefaultWorkingDirectory)
              condition: and(${{ aDnsRecord.aksPreRotationCondition }}, ${{ parameters.condition }})

          - template: azcli/aks-get-authorized-ips.yml
            parameters:
              aksClusterName: ${{ aDnsRecord.aksClusterName }}
              aksClusterResourceGroup: ${{ parameters.aksResourceGroupName }}
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: $(System.DefaultWorkingDirectory)
              condition: and(${{ aDnsRecord.aksPreRotationCondition }}, ${{ parameters.condition }})

          - template: azcli/aks-update-authorized-ips.yml
            parameters:
              aksClusterName: ${{ aDnsRecord.aksClusterName }}
              aksClusterResourceGroup: ${{ parameters.aksResourceGroupName }}
              authorizedIpRanges: $(baseRange),$(agentIp)
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              waitAfterUpdate: true
              workingDirectory: $(System.DefaultWorkingDirectory)
              condition: and(${{ aDnsRecord.aksPreRotationCondition }}, ${{ parameters.condition }})

          - template: azcli/aks-get-credentials.yml
            parameters:
              aksClusterName: ${{ aDnsRecord.aksClusterName }}
              aksClusterResourceGroup: ${{ parameters.aksResourceGroupName }}
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: $(System.DefaultWorkingDirectory)                  
              condition: and(${{ aDnsRecord.aksPreRotationCondition }}, not(parameters.skipAksLogon), ${{ parameters.condition }})

          - template: kubectl/get-service-ips.yml
            parameters:
              serviceName: ${{ aDnsRecord.serviceName }}
              namespace: ${{ aDnsRecord.namespace }}
              workingDirectory: $(System.DefaultWorkingDirectory)
              condition: ${{ parameters.condition }}

        - ${{ if and(eq(aDnsRecord.fromPrivateEndpoint, 'false'), eq(aDnsRecord.aksPreRotation, 'false')) }}:
          - bash: |
              echo "Processing A DNS record ${{ aDnsRecord.name }}..."
              echo "This ip address ${{ dnsSubstring.ipAddress }} will be the value of the environment variable serviceExternalIp."
              serviceExternalIp='${{ dnsSubstring.ipAddress }}'
              echo "##vso[task.setvariable variable=serviceExternalIp]$serviceExternalIp"
            displayName: 'Env variable serviceExternalIp for ${{ aDnsRecord.name }} and subresource ${{ dnsSubstring.subresource }}'
            condition: ${{ parameters.condition }}

        - template: azcli/network-private-dns-record-set-a-show.yml
          parameters:
            stepNameSuffix: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
            azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
            workingDirectory: $(System.DefaultWorkingDirectory)
            dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
            dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
            dnsZoneName: ${{ dns.name }}
            recordSetName: ${{ aDnsRecord.name }}
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'true') }}:
              condition: and(not(eq(variables['resource_property'], '')), ${{ parameters.condition }})
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'false') }}:
              condition: ${{ parameters.condition }}

        - template: azcli/network-private-dns-record-set-a-remove-record.yml
          parameters:
            stepNameSuffix: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
            azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
            workingDirectory: $(System.DefaultWorkingDirectory)
            dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
            dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
            dnsZoneName: ${{ dns.name }}
            recordSetName: ${{ aDnsRecord.name }}
            ipAddressToRemove: $(ip_address_dns_env)
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'true') }}:
              condition: and(not(eq(variables['resource_property'], '')), ne(variables['ip_address_dns_env'], variables['ip_address_pe_env']), ne(variables['ip_address_dns_env'], ''), ${{ parameters.condition }})
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'false') }}:
              condition: and(ne(variables['ip_address_dns_env'], variables['serviceExternalIp']), ne(variables['ip_address_dns_env'], ''), ne(variables['serviceExternalIp'], ''), ${{ parameters.condition }})

        - template: azcli/network-private-dns-record-set-a-create.yml
          parameters:
            stepNameSuffix: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
            azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
            workingDirectory: $(System.DefaultWorkingDirectory)
            dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
            dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
            dnsZoneName: ${{ dns.name }}
            recordSetName: ${{ aDnsRecord.name }}
            ttl_seconds: ${{ aDnsRecord.ttl_seconds }}
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'true') }}:
              condition: and(not(eq(variables['resource_property'], '')), ne(variables['ip_address_dns_env'], variables['ip_address_pe_env']), eq(variables['ip_address_dns_env'], ''), ne(variables['ip_address_pe_env'], ''), ${{ parameters.condition }})
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'false') }}:
              condition: and(ne(variables['ip_address_dns_env'], variables['serviceExternalIp']), eq(variables['ip_address_dns_env'], ''), ne(variables['serviceExternalIp'], ''), ${{ parameters.condition }})

        - template: azcli/network-private-dns-record-set-a-add-record.yml
          parameters:
            stepNameSuffix: ${{ aDnsRecord.targetResourceSubstring }}_${{ dns.substring }}
            azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
            workingDirectory: $(System.DefaultWorkingDirectory)
            dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
            dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
            dnsZoneName: ${{ dns.name }}
            recordSetName: ${{ aDnsRecord.name }}
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'true') }}:
              ipAddressToAdd: $(ip_address_pe_env)
              condition: and(not(eq(variables['resource_property'], '')), ne(variables['ip_address_dns_env'], variables['ip_address_pe_env']), ne(variables['ip_address_pe_env'], ''), ${{ parameters.condition }})
            ${{ if eq(aDnsRecord.fromPrivateEndpoint, 'false') }}:
              ipAddressToAdd: $(serviceExternalIp)
              condition: and(ne(variables['ip_address_dns_env'], variables['serviceExternalIp']), ne(variables['serviceExternalIp'], ''), ${{ parameters.condition }})

        - ${{ if and(eq(aDnsRecord.fromPrivateEndpoint, 'false'), eq(aDnsRecord.aksPostRotation, 'true')) }}:
          - template: azcli/aks-update-authorized-ips.yml
            parameters:
              aksClusterName: ${{ aDnsRecord.aksClusterName }}
              aksClusterResourceGroup: ${{ parameters.aksResourceGroupName }}
              authorizedIpRanges: $(baseRange)
              waitAfterUpdate: false
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: $(System.DefaultWorkingDirectory)
              condition: and(always(), ${{ aDnsRecord.aksPostRotationCondition }}, ${{ parameters.condition }})