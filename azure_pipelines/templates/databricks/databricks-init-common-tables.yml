parameters:
- name: azureServiceConnectionName
  type: string
- name: databricksHost
  type: string
- name: clusterId
  type: string
- name: databricksRemotePath
  type: string
- name: notebookName
  type: string
- name: jobEnvironmentName
  type: string
- name: jobEnvironmentNameUnityCatalogGroups
  type: string
- name: jobStorageAccountName
  type: string
- name: jobViewerGroups
  type: string
- name: wheelsCsvFile 
  type: string
- name: wheelsPackagesRemoteFileStore 
  type: string
- name: initCommonTables
  type: boolean
  default: false
- name: forceDelete
  type: boolean   
- name: taskNameSubstring
  type: string
  default: ""
- name: condition
  displayName: Run conditions for task
  type: string
  default: ""

steps:
- task: AzureCLI@2
  name: "run_databricks_init_common_notebook_${{ parameters.taskNameSubstring }}"
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  displayName: 'Run Databricks init common notebook ${{ parameters.taskNameSubstring }}"'
  inputs:
    azureSubscription: ${{ parameters.azureServiceConnectionName }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      if [[ ! -f "${{ parameters.wheelsCsvFile }}" ]] ; then
        echo "File ${{ parameters.wheelsCsvFile }} doesn't exist, aborting."
        exit 1
      fi

      if [[ ${{ parameters.forceDelete }} == True ]]
      then
        forceDelete="1"
      else
        forceDelete="0"
      fi

      packagesListArray=()
      while IFS=', ' read -r  packagename packageversion filename targetname || [ -n "$targetname" ]; do
        packagesListArray+=("'${{ parameters.wheelsPackagesRemoteFileStore }}$targetname'")
      done < <(tail -n +2 "${{ parameters.wheelsCsvFile }}")
      jobBaseParametersPackageList=$( IFS=","; echo "${packagesListArray[*]}" )

      IFS=',' read -ra jobViewers <<< "${{ parameters.jobViewerGroups }}"
      declare accessControlList=""

      for group in "${jobViewers[@]}"
      do
        accessControlList+="{\"group_name\": \"$group\", \"permission_level\": \"CAN_VIEW\"}, "
      done
      
      accessControlList=$(echo "[${accessControlList::-2}]" | jq)

      echo "Access control list to be attached to the job:"
      echo $accessControlList

      if [[ ${{ parameters.initCommonTables }} == True ]]
      then
        commonTables="1"
        echo "Init common tables enabled"
      else
        commonTables="0"
        echo "Init common tables disabled"
      fi

      echo "Json to pass to command:"
      echo '{
        "name": "${{ parameters.notebookName }}-$(Build.BuildNumber)",
        "access_control_list": '$accessControlList',
        "tasks": [
          {
            "task_key": "${{ parameters.notebookName }}",
            "run_if": "ALL_SUCCESS",
            "notebook_task": {
              "notebook_path": "${{ parameters.databricksRemotePath }}${{ parameters.notebookName }}",
              "base_parameters": {
                "env": "${{ parameters.jobEnvironmentName }}",
                "env_type": "${{ parameters.jobEnvironmentNameUnityCatalogGroups }}",
                "storage_account": "${{ parameters.jobStorageAccountName }}",
                "packages": "['$jobBaseParametersPackageList']",
                "system_ids": "[]",
                "init_common_tables": "'$commonTables'",
                "force_delete": "'$forceDelete'"
              },
              "source": "WORKSPACE"
            },
            "existing_cluster_id": "${{ parameters.clusterId }}",
            "max_retries": 1,
            "timeout_seconds": 3600
          }
        ]
      }' | jq > result.json
      cat result.json

      JOB_ID=$(databricks jobs create --json @result.json)
        echo $JOB_ID
        JOB_ID=$(echo $JOB_ID | jq '.job_id')
      if [[ -n "$JOB_ID" ]]
      then
        echo "Job Id $JOB_ID created for default"
        jobIdListString+="$JOB_ID"
        jobIdListString+=","
      else
        echo "Failed to create Databricks job, aborting."
        exit 1
      fi
      if [[ $initCommonTables == true ]]
      then
        break
      fi

      jobIdListString="${jobIdListString}"

      echo "##vso[task.setvariable variable=system_job_ids_common]$jobIdListString"
  env:
    DATABRICKS_HOST: ${{ parameters.databricksHost }}
