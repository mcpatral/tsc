parameters:
- name: azureServiceConnectionName
  type: string
- name: databricksHost
  type: string
- name: jobIds
  type: string
- name: taskNameSubstring
  type: string
  default: ""
- name: condition
  displayName: Run conditions for task
  type: string
  default: ""

steps:
- task: AzureCLI@2
  name: "run_databricks_jobs_${{ parameters.taskNameSubstring }}"
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  displayName: "Run Databricks jobs ${{ parameters.taskNameSubstring }}"
  inputs:
    azureSubscription: ${{ parameters.azureServiceConnectionName }}
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      IFS=',' read -ra databricksJobIds <<< "${{ parameters.jobIds }}"
      for JOB_ID in "${databricksJobIds[@]}"; do
        if [[ -n "$JOB_ID" ]]
        then
          echo "Job Id $JOB_ID successfully parsed."
        else
            echo "Failed to parse Databricks job id $JOB_ID, aborting."
            exit 1
        fi
      done

      runIdListString=""
      for JOB_ID in "${databricksJobIds[@]}"; do
        echo "Running Databricks job $JOB_ID..."
        RUN_ID=$(databricks jobs run-now --no-wait $JOB_ID | jq '.run_id')
        if [[ -n "$RUN_ID" ]]
        then
          echo "Databricks job $JOB_ID is being executed with run id $RUN_ID"
          runIdListString+="$RUN_ID"
          runIdListString+=","
        else
          echo "Failed to create Databricks run, aborting."
          exit 1
        fi
      done
      runIdListString="${runIdListString}"

      echo "##vso[task.setvariable variable=run_ids]$runIdListString"
  env:
    DATABRICKS_HOST: ${{ parameters.databricksHost }}