parameters:
- name: databricksHost
  type: string
- name: runIds
  type: string
- name: taskNameSubstring
  type: string
  default: ""
- name: condition
  displayName: Run conditions for task
  type: string
  default: ""

steps:
- task: Bash@3
  name: "get_databricks_run_result_${{ parameters.taskNameSubstring }}"
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  displayName: "Get Databricks run results ${{ parameters.taskNameSubstring }}"
  inputs:
    targetType: 'inline'
    script: |
      IFS=',' read -ra databricksRunIds <<< "${{ parameters.runIds }}"
      for RUN_ID in "${databricksRunIds[@]}"; do
        if [[ -n "$RUN_ID" ]]
        then
          echo "The run Id $RUN_ID was successfully parsed."
        else
            echo "Failed to parse Databricks run id $RUN_ID, aborting."
            exit 1
        fi
      done

      failedRuns = ""
      for RUN_ID in "${databricksRunIds[@]}"; do
        RESULT=$(databricks jobs get-run-output $RUN_ID)
        RESULT_STATE=$(echo $RESULT | jq -r '.metadata.state.result_state')
        RESULT_MESSAGE=$(echo $RESULT | jq -r '.metadata.state.state_message')
        if [[ -n "$RESULT_STATE" ]]
        then
          echo "The result state for run id $RUN_ID is $RESULT_STATE"
        else
          echo "Failed to get the Databricks result message, aborting."
          exit 1
        fi
        if [ $RESULT_STATE = "FAILED" ]
        then
          echo "The FAILED result message for the run id $RUN_ID is $RESULT_MESSAGE"
          failedRuns+="$RUN_ID"
          failedRuns+=" "
        fi
        echo "This is the complete result for the run id $RUN_ID"
        echo $RESULT | jq . 
        echo ""
      done

      echo ""

      if [[ -n "$failedRuns" ]]
      then
        echo "##vso[task.logissue type=error;]The following run ids have a FAILED result state $failedRuns"
        echo "##vso[task.complete result=Failed;done=true;]The following run ids have a FAILED result state $failedRuns"
      fi
  env:
    DATABRICKS_HOST: ${{ parameters.databricksHost }}