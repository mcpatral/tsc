parameters:
- name: databricksTokenIdToDelete
  displayName: Databricks token Id to delete
  type: string
  default: null
- name: databricksTokenIdToKeep
  displayName: Databricks token Id to keep
  type: string
  default: null
- name: removeTheRestOfTokens
  displayName: Remove the rest of tokens
  type: boolean
  default: false
- name: condition
  displayName: Run conditions for task
  type: string
  default: ""

steps:
- ${{ if eq(parameters.removeTheRestOfTokens, false) }}:
  - task: Bash@3
    displayName: Databricks revoke only one token
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    inputs:
      targetType: 'inline'
      script: |
        echo "Removing databricks token with id ${{ parameters.databricksTokenIdToDelete }}"
        databricks tokens revoke --token-id ${{ parameters.databricksTokenIdToDelete }}
        if [[ $? -ne 0 ]]; then
          echo "##vso[task.logissue type=error;]error revoking the token"
          exit 1
        fi

- ${{ if eq(parameters.removeTheRestOfTokens, true) }}:
  - task: Bash@3
    displayName: Databricks revoke all tokens except the current one
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    inputs:
      targetType: 'inline'
      script: |
        readarray -t tokens_array <<< "$(databricks tokens list | jq -r '.token_infos[].token_id')"
        echo "This is the list of the existing token ids:"
        for token_id in "${tokens_array[@]}"; do
          echo "$token_id"
        done
        for token_id in "${tokens_array[@]}"; do 
          if [[ ! "$token_id" == *"${{ parameters.databricksTokenIdToKeep }}"* ]]; then
            echo "Removing databricks token with id $token_id"
            databricks tokens revoke --token-id $token_id
          fi ;
        done
        if [[ $? -ne 0 ]]; then
          echo "##vso[task.logissue type=error;]error revoking the token with the id $token_id"
          exit 1
        fi