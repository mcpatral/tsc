parameters:
  - name: azureServiceConnectionName
    displayName: Azure Service Connection name
    type: string

  - name: databricksPackageUploadPath
    displayName: Path in databricks to upload artifacts
    type: string

  - name: csvFilePath
    displayName: Path to *.csv file with listed libraries
    type: string

  - name: artifactsDirectoryPath
    displayName: Local path for libraries
    type: string

  - name: condition
    displayName: Run conditions for task
    type: string
    default: ""

steps:
  - task: AzureCLI@2
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    displayName: 'Preparing libraries'
    inputs:
      azureSubscription: '${{ parameters.azureServiceConnectionName }}'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        mkdir -p ${{ parameters.artifactsDirectoryPath }}
        tail -n +2 ${{ parameters.csvFilePath }} | while IFS=',' read -r  packagename packageversion filename targetname || [ -n "$targetname" ]; do
          echo "=============================================================================="
          echo "Downloading file: $filename"
          echo "=============================================================================="
          command_output=$(python3 -m pip wheel $packagename==$packageversion -w ${{ parameters.artifactsDirectoryPath }}  )
          mv ${{ parameters.artifactsDirectoryPath }}/$filename ${{ parameters.artifactsDirectoryPath }}/$targetname 
          echo "$command_output"
          # ------------ TODO: review errors ------------
          if [[ $command_output == *"Error"* ]]; then
            exit 1
          fi
        done
      workingDirectory: '$(System.DefaultWorkingDirectory)'
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

  - template: databricks-libraries-upload.yml
    parameters:
      azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
      databricksPackageUploadPath: ${{ parameters.databricksPackageUploadPath }} 
      artifactsDirectoryPath: ${{ parameters.artifactsDirectoryPath }}
