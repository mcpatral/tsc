parameters:
  - name: resourceName
    displayName: Resource Name
    type: string
    default: ''
  - name: resourceGroupName
    displayName: Resource Group Name
    type: string
    default: ''
  - name: resourceType
    displayName: Resource Type
    type: string
    default: ''
  - name: resourceId
    displayName: Resource Id
    type: string
    default: ''
  - name: azureServiceConnectionName
    displayName: Azure Service Connection name
    type: string
  - name: workingDirectory
    displayName: Azure CLI working directory
    type: string
  - name: condition
    displayName: Run conditions for task
    type: string
    default: ""
  - name: stepNameSubstring
    displayName: Step Name Substring
    type: string
    default: ""
  - name: propertyAddress
    displayName: Property Address
    type: string
    default: "id"

steps:
  - task: AzureCLI@2
    name: resourceId_${{ parameters.stepNameSubstring }}
    displayName: Get the property ${{ parameters.propertyAddress }} of the resource ${{ parameters.stepNameSubstring }}
    timeoutInMinutes: 1
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    inputs:
      azureSubscription: ${{ parameters.azureServiceConnectionName }}
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Getting the property ${{ parameters.propertyAddress }} of a resource"
        declare resource_property=""
        
        if [[ '${{ parameters.resourceId }}' == '' ]]; then
          resource_property=$(az resource show -g ${{ parameters.resourceGroupName }} -n ${{ parameters.resourceName }} --resource-type ${{ parameters.resourceType }} --query ${{ parameters.propertyAddress }} --output tsv)
          if [[ $? -ne 0 ]]; then
            echo "##vso[task.logissue type=warning;]the requested resource ${{ parameters.resourceName }} may not exist in the resource group ${{ parameters.resourceGroupName }} with the resource type ${{ parameters.resourceType }}."
          fi
        else
          resource_property=$(az resource show --ids ${{ parameters.resourceId }} --query ${{ parameters.propertyAddress }} --output tsv)
          if [[ $? -ne 0 ]]; then
            echo "##vso[task.logissue type=warning;]the requested resource ${{ parameters.resourceId }} may not exist."
          fi
        fi

        echo $resource_property
        echo "##vso[task.setvariable variable=resource_property]$resource_property"
      workingDirectory: ${{ parameters.workingDirectory }}
