parameters:
    - name: name  # defaults for any parameters that aren't specified
      default: ''
    - name: vmImage
      default: ''
    - name: azureServiceConnectionName
      type: string
      default: 'sc_datamngtdev_poc'
    - name: project
      type: string
    - name: resource
      type: string
    - name: env
      type: string
    
stages:
- stage: TerraformPlan
  pool: 
    vmImage: ${{ parameters.vmImage }}
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    steps:
    - task: DownloadSecureFile@1
      name: id_rsa
      displayName: 'Download ID_RSA'
      inputs:
        secureFile: 'id_rsa'
    
    - script: "cp $(id_rsa.secureFilePath) ./terraform/modules/airflow/files/id_rsa"
      displayName: 'Copy id_rsa'

    - script: "ls -la ./terraform/modules/airflow/files"
      displayName: 'Check id_rsa'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform latest'
      # inputs:
      #   terraformVersion: 1.3.7

    - task: TerraformCLI@0
      displayName: 'Run terraform version'
      inputs:
        command: version

    - task: TerraformCLI@0
      displayName: 'Run terraform init'
      inputs:
        command: init
        backendType: azurerm
        backendServiceArm: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'

    - task: TerraformCLI@0
      displayName: 'Run terraform validate'
      inputs:
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace new'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
        workspaceSubCommand: new
        skipExistingWorkspace: true
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace select'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: TerraformCLI@0
      displayName: 'Run terraform plan'
      inputs:
        command: plan
        backendType: azurerm
        environmentServiceName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform.tfplan -detailed-exitcode -var-file="../../vars/environments.tfvars" -var ENV=${{ parameters.env }} -var AZURE_SUBSCRIPTION_ID=$(subscription_id) -var AZURE_CLIENT_ID=$(client_id) -var AZURE_CLIENT_SECRET=$(client_secret) -var AZURE_TENANT_ID=$(tenant_id)'
        publishPlanResults: "PlanResults"
  ##    Provides is the publishing of the plan directly to ADO.      
  #      publishPlanResults: ${{ parameters.AzureSubscriptionServiceConnectionName }}

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: drop'
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform.tfplan'

- stage: TerraformApply
  dependsOn: TerraformPlan
  pool: 
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - job: 
    steps:
    - task: DownloadSecureFile@1
      name: id_rsa
      displayName: 'Download ID_RSA'
      inputs:
        secureFile: 'id_rsa'
    
    - script: "cp $(id_rsa.secureFilePath) ./terraform/modules/airflow/files/id_rsa"
      displayName: 'Copy id_rsa'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform latest'

    - task: TerraformCLI@0
      displayName: 'Run terraform version'
      inputs:
        command: version

    - task: TerraformCLI@0
      displayName: 'Run terraform init'
      inputs:
        command: init
        backendType: azurerm
        backendServiceArm: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'

    - task: DownloadBuildArtifacts@1
      displayName: 'Download Build Artifacts'
      inputs:
        artifactName: drop

    - task: TerraformCLI@0
      displayName: 'Run terraform validate'
      inputs:
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'  

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace new'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
        workspaceSubCommand: new
        skipExistingWorkspace: true
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace select'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: TerraformCLI@0
      displayName: 'Run terraform apply'
      inputs:
        command: apply
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        commandOptions: '$(System.ArtifactsDirectory)/drop/terraform.tfplan'
        environmentServiceName: ${{ parameters.azureServiceConnectionName }}

- stage: TerraformDestroy
  dependsOn: []
  pool: 
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - job:
    steps:
    - task: DownloadSecureFile@1
      name: id_rsa
      displayName: 'Download ID_RSA'
      inputs:
        secureFile: 'id_rsa'
    
    - script: "cp $(id_rsa.secureFilePath) ./terraform/modules/airflow/files/id_rsa"
      displayName: 'Copy id_rsa'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Install Terraform latest'

    - task: TerraformCLI@0
      displayName: 'Run terraform version'
      inputs:
        command: version

    - task: TerraformCLI@0
      displayName: 'Run terraform init'
      inputs:
        command: init
        backendType: azurerm
        backendServiceArm: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace new'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
        workspaceSubCommand: new
        skipExistingWorkspace: true
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      displayName: 'terraform workspace select'
      inputs:
        command: workspace
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        workspaceName: ${{ parameters.env }}
      condition: and(succeeded(), ne(variables['env'], 'default'))

    - task: TerraformCLI@0
      displayName: 'Run terraform destroy'
      inputs:
        command: destroy
        workingDirectory: './terraform/${{ parameters.project }}/${{ parameters.resource }}'
        environmentServiceName: ${{ parameters.azureServiceConnectionName }}
        commandOptions: '-var-file="../../vars/environments.tfvars" -var ENV=${{ parameters.env }} -var AZURE_SUBSCRIPTION_ID=$(subscription_id) -var AZURE_CLIENT_ID=$(client_id) -var AZURE_CLIENT_SECRET=$(client_secret) -var AZURE_TENANT_ID=$(tenant_id)'

- stage: DataStore
  dependsOn: []
  pool: 
    vmImage: ${{ parameters.vmImage }}
  jobs:
  - job:
    steps:
    - task: DownloadSecureFile@1
      name: bronze
      displayName: 'Download secure file'
      inputs:
        secureFile: 'bronze_datastore.yml'

    - task: DownloadSecureFile@1
      name: silver
      displayName: 'Download secure file'
      inputs:
        secureFile: 'silver_datastore.yml'

    - task: AzureCLI@2
      displayName: 'Sync DataStore with Dalake Bronze'
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnectionName }}
        scriptType: bash
        inlineScript: |
          az extension list
          az extension remove -n azure-cli-ml
          az extension remove -n ml
          az extension add -n ml
          az extension update -n ml
          az ml datastore create --file $(bronze.secureFilePath) --resource-group rg-aml-da-${{ parameters.env }} --workspace-name amlwda${{ parameters.env }}
        scriptLocation: inlineScript

    - task: AzureCLI@2
      displayName: 'Sync DataStore with Dalake Silver'
      inputs:
        azureSubscription: ${{ parameters.azureServiceConnectionName }}
        scriptType: bash
        inlineScript: |
          az extension list
          az extension remove -n azure-cli-ml
          az extension remove -n ml
          az extension add -n ml
          az extension update -n ml
          az ml datastore create --file $(silver.secureFilePath) --resource-group rg-aml-da-${{ parameters.env }} --workspace-name amlwda${{ parameters.env }}
        scriptLocation: inlineScript