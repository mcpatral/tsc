parameters:
  - name: azureServiceConnectionName
    displayName: Azure Service Connection Name
    type: string
  - name: terraformVersion
    displayName: Terraform Version
    type: string
  - name: terraformResourceGroupName
    displayName: Resource group for TF
    type: string
  - name: terraformSaName
    displayName: Storage Account name for TF
    type: string
  - name: terraformBackendContainerName
    displayName: Container name for TF
    type: string
  - name: acrRepositoryName
    displayName: ACR Repository Name for private agent AKS cluster
    type: string
  - name: acrRepositoryVersion
    displayName: ACR Repository Version for private agent AKS cluster
    type: string
  - name: aksDevOpsNamespace
    displayName: Azure Kubernetes DevOps Namespace
    type: string   
  - name: azureDevOpsPool
    displayName: Azure DevOps Pool Name
    type: string    
  - name: azureDevOpsUrl
    displayName: Azure DevOps Url
    type: string
  - name: keyVaultName
    displayName: Key vault name
    type: string
  - name: kubectlVersion
    displayName: Kubectl version to use
    type: string 
  - name: helmVersion
    displayName: Helm version to use
    type: string
  - name: osmVersion
    displayName: Open Service Mesh CLI version to install
    type: string
    default: "1.2.4"
  - name: calicoVersion
    displayName: Calico CLI version to install
    type: string
  - name: calicoNamespace
    displayName: Calico Namespace name
    type: string
  - name: osmNamespace
    displayName: Open Service Mesh Namespace name
    type: string
  - name: pool
    displayName: Agent pool name to run jobs
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: stageName
    displayName: Stage Name
    type: string
  - name: condition
    displayName: Condition to run the stage
    type: string
    default: ""
  - name: enablersModule
    displayName: Enablers module name
    type: string
  - name: agentsReplicas
    displayName: Azure DevOps Agents replicas count
    type: string

stages:
- stage: ${{ parameters.stageName }}
  dependsOn: ${{ parameters.dependsOn }}
  displayName: Enablers provisioning
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  jobs:
  - job: provision_AKS_agents
    displayName: 'Provision AKS agents'
    pool:
      ${{ if ne(parameters['pool'], 'ubuntu-latest') }}:
        name: ${{ parameters.pool }}
      ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
        vmImage: ${{ parameters.pool }}
    steps:
    - template: templates/azcli/sa-update-public-network-access.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        saName: ${{ parameters.terraformSaName }}
        publicAccess: Enabled
        waitAfterUpdate: true
        
    - template: templates/terraform-outputs.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)/terraform/${{ parameters.enablersModule }}
        terraformVersion: ${{ parameters.terraformVersion }}
        terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
        terraformSaName: ${{ parameters.terraformSaName }}
        terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}
        
    - template: templates/utils/get-agent-ip.yml
      parameters:
        workingDirectory: $(System.DefaultWorkingDirectory)

    - template: templates/azcli/kv-network-rule.yml
      parameters:
        kvName: ${{ parameters.keyVaultName }}
        resourceGroupName: ${{ parameters.terraformResourceGroupName }}
        ipRange: $(agentIp)
        action: "add"
        waitAfterUpdate: false
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)          

    - template: templates/azcli/kv-update-public-network-access.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        kvName: ${{ parameters.keyVaultName }}
        publicAccess: Enabled
        waitAfterUpdate: true        

    - template: templates/azcli/kv-get-secrets.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        keyVaultName: ${{ parameters.keyVaultName }}
        keyVaultSecretNames:
          - azptokensecret
    
    - template: templates/azcli/kv-network-rule.yml
      parameters:
        kvName: ${{ parameters.keyVaultName }}
        resourceGroupName: ${{ parameters.terraformResourceGroupName }}
        ipRange: $(agentIp)
        action: "remove"
        waitAfterUpdate: false
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)                     

    - template: templates/azcli/kv-update-public-network-access.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        kvName: ${{ parameters.keyVaultName }}
        publicAccess: Disabled
        waitAfterUpdate: false
        condition: or (always(), canceled()) 

    - ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
      - template: templates/azcli/aks-update-authorized-ips.yml
        parameters:
          aksClusterName: $(terraform_out_aks_devops_name)
          aksClusterResourceGroup: $(terraform_out_resource_group_name)
          authorizedIpRanges: "$(terraform_out_aks_authorized_ips),$(agentIp)/32"
          waitAfterUpdate: true
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(System.DefaultWorkingDirectory)

    - template: templates/azcli/aks-get-credentials.yml
      parameters:
        aksClusterName: $(terraform_out_aks_devops_name)
        aksClusterResourceGroup: $(terraform_out_resource_group_name)
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
    
    - template: templates/cluster-calico-osm-patch.yml
      parameters:
        calicoVersion: ${{ parameters.calicoVersion }}
        calicoNamespace: ${{ parameters.calicoNamespace }}
        osmNamespace: ${{ parameters.osmNamespace }}
        addIngressConfig: false

    - template: templates/helm-steps.yml
      parameters:
        aksClusterName: $(terraform_out_aks_devops_name)
        aksClusterResourceGroup: $(terraform_out_resource_group_name)
        acrName: $(terraform_out_acr_name_main)
        kubectlVersion: ${{ parameters.kubectlVersion }}
        helmVersion: ${{ parameters.helmVersion }}
        helmReleaseName: ${{ parameters.aksDevOpsNamespace }}
        namespace: ${{ parameters.aksDevOpsNamespace }}
        helmChartDirectory: $(System.DefaultWorkingDirectory)/helm/ado-agents
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        helmTimeout: 7m0s
        downloadHelmDependencies: false
        skipAksLogon: true
        skipHelmInstall: false
        skipKubectlInstall: false
        enableOSM: true
        helmChartValues: |
          adoAgents.image.registry=$(terraform_out_acr_name_main).azurecr.io
          adoAgents.image.repo=${{ parameters.acrRepositoryName }}
          adoAgents.image.tag=${{ parameters.acrRepositoryVersion }}
          adoAgents.azureDevops.url=${{ parameters.azureDevOpsUrl }}
          adoAgents.azureDevops.token=$(azptokensecret)
          adoAgents.azureDevops.pool=${{ parameters.azureDevOpsPool }}
          adoAgents.replicas=${{ parameters.agentsReplicas }}
          calico.cidrs.postgresql=$(terraform_out_postgresql_cidr)
          calico.cidrs.aks.main.nodes=$(terraform_out_aks_cluster_nodes_cidr_main)
          osm.hosts.airflowDns="airflow.$(terraform_out_private_dns_zone_name_intrum)"

    - ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
      - template: templates/azcli/aks-update-authorized-ips.yml
        parameters:
          aksClusterName: $(terraform_out_aks_devops_name)
          aksClusterResourceGroup: $(terraform_out_resource_group_name)
          authorizedIpRanges: $(terraform_out_aks_authorized_ips)
          condition: and(always(), eq(variables.updatedAksApi, 'true'))
          waitAfterUpdate: false
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(System.DefaultWorkingDirectory)

    - template: templates/azcli/resource-show-property.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceName: $(terraform_out_aks_devops_name)
        resourceGroupName: $(terraform_out_resource_group_name)
        resourceType: "Microsoft.ContainerService/ManagedClusters"
        workingDirectory: $(System.DefaultWorkingDirectory)
        propertyAddress: id

    - template: templates/azcli/tag-update.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceId: $(resource_property)
        tags: aksContainerImageVersion=${{ parameters.acrRepositoryVersion }}
        operation: merge
        workingDirectory: $(System.DefaultWorkingDirectory)

    - template: templates/azcli/sa-update-public-network-access.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        resourceGroupName:  ${{ parameters.terraformResourceGroupName }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        saName: ${{ parameters.terraformSaName }}
        publicAccess: Disabled
        waitAfterUpdate: false
        condition: or (always(), canceled()) 