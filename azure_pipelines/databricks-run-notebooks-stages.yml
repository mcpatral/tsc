parameters:
  - name: azureServiceConnectionName
    type: string
  - name: terraformVersion
    type: string
  - name: terraformResourceGroupName
    type: string
  - name: terraformSaName
    type: string
  - name: terraformBackendContainerName
    type: string
  - name: mainResourceGroupName
    type: string
  - name: infrastructureModule
    type: string
  - name: contentModule
    type: string
  - name: notebookName
    type: string
  - name: environmentName
    type: string
  - name: environmentNameUnityCatalogGroups
    type: string
  - name: systemSchemaNames
    type: string
  - name: storageAccountName
    type: string
  - name: databricksRemotePath
    type: string
  - name: databricksViewerGroups
    type: string
  - name: wheelsPackagesRemoteFileStore
    type: string
  - name: wheelsCsvFile
    type: string
  - name: devopsRepositoryCheckout
    type: string
  - name: sharedResourcesRepositoryCheckout
    type: string
  - name: pool
    type: string
  - name: workingDirectory
    type: string
  - name: dependsOn
    type: object
    default: []
  - name: initCommonTables
    type: boolean
  - name: forceDelete
    type: boolean     
  - name: condition
    displayName: Condition to run the stage
    type: string
    default: ""

stages:
  - stage: databricks_run_notebook
    displayName: 'Run notebook on Databricks'
    dependsOn: ${{ parameters.dependsOn }}
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    jobs:
      - job: databricks_run_notebook
        displayName: 'Run notebook on Databricks'
        pool: 
          ${{ if ne(parameters['pool'], 'ubuntu-latest') }}:
            name: ${{ parameters.pool }}
          ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
            vmImage: ${{ parameters.pool }}
        steps:
          - checkout: ${{ parameters.devopsRepositoryCheckout }}
            path: s/
          - checkout: ${{ parameters.sharedResourcesRepositoryCheckout }}
            path: s/${{ parameters.sharedResourcesRepositoryCheckout }}

          - template: templates/terraform-outputs.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: ${{ parameters.workingDirectory }}/terraform/${{ parameters.infrastructureModule }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
              terraformSaName: ${{ parameters.terraformSaName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

          - template: templates/terraform-outputs.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: ${{ parameters.workingDirectory }}/terraform/${{ parameters.contentModule }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
              terraformSaName: ${{ parameters.terraformSaName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

          - template: templates/databricks/databricks-installation-and-login.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              resourceGroupName: ${{ parameters.mainResourceGroupName }}
              databricksWorkspaceName: $(terraform_out_db_workspace_name)

          - template: templates/databricks-run-notebooks-steps.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              databricksHost: $(terraform_out_db_workspace_host)
              clusterId: $(terraform_out_databricks_provision_cluster_id)
              databricksRemotePath: ${{ parameters.databricksRemotePath }}
              databricksViewerGroups: ${{ parameters.databricksViewerGroups }}
              notebookName: ${{ parameters.notebookName }}
              environmentName: ${{ parameters.environmentName }}
              environmentNameUnityCatalogGroups: ${{ parameters.environmentNameUnityCatalogGroups }}
              storageAccountName: ${{ parameters.storageAccountName }}
              wheelsCsvFile: ${{ parameters.wheelsCsvFile }}
              wheelsPackagesRemoteFileStore: ${{ parameters.wheelsPackagesRemoteFileStore }}
              forceDelete: ${{ parameters.forceDelete }}
              initCommonTables: ${{ parameters.initCommonTables }}
              taskNameSubstring: 'init_common_tables'

          - template: templates/databricks-run-notebooks-steps.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              databricksHost: $(terraform_out_db_workspace_host)
              clusterId: $(terraform_out_databricks_provision_cluster_id)
              databricksRemotePath: ${{ parameters.databricksRemotePath }}
              databricksViewerGroups: ${{ parameters.databricksViewerGroups }}
              notebookName: ${{ parameters.notebookName }}
              environmentName: ${{ parameters.environmentName }}
              environmentNameUnityCatalogGroups: ${{ parameters.environmentNameUnityCatalogGroups }}
              systemSchemaNames: ${{ parameters.systemSchemaNames }}
              storageAccountName: ${{ parameters.storageAccountName }}
              wheelsCsvFile: ${{ parameters.wheelsCsvFile }}
              wheelsPackagesRemoteFileStore: ${{ parameters.wheelsPackagesRemoteFileStore }}
              forceDelete: ${{ parameters.forceDelete }}
              initCommonTables: false
              taskNameSubstring: 'system_tables'