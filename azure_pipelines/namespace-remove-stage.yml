parameters:
  - name: aksClusterName
    displayName: AKS Cluster name
    type: string
  - name: aksClusterResourceGroup
    displayName: AKS Cluster resource group name
    type: string
  - name: namespace
    displayName: Namespace to install chart
    type: string
  - name: helmReleaseName
    displayName: Airflow Helm release name
    type: string
  - name: kubectlVersion
    displayName: Kubectl version to use
    type: string
  - name: helmVersion
    displayName: Helm version to use
    type: string
  - name: terraformVersion
    displayName: Terraform version
    type: string
  - name: azureServiceConnectionName
    displayName: Azure Service Connection name
    type: string
  - name: skipKubectlInstall
    displayName: Skip installation of Kubectl
    type: boolean
    default: false
  - name: skipAksLogon
    displayName: Skip logon to AKS
    type: boolean
    default: false
  - name: infrastructureModule
    displayName: Infrastructure module name
    type: string
  - name: terraformResourceGroupName
    displayName: Terraform state Storage Account resource group name
    type: string
  - name: terraformSaName
    displayName: Terraform state Storage Account name
    type: string
  - name: terraformBackendContainerName
    displayName: Terraform state Storage Account Container name
    type: string
  - name: workingDirectory
    displayName: Working directory of tasks
    type: string
    default: $(System.DefaultWorkingDirectory)
  - name: dependsOn
    type: object
    default: []
  - name: condition
    displayName: Condition to run the stage
    type: string
    default: ""
  - name: pool
    displayName: Agent pool
    type: string

stages:
  - stage: namespace_deprovisioning
    dependsOn: ${{ parameters.dependsOn }}
    ${{ if ne(parameters.condition, '') }}:
      condition: ${{ parameters.condition }}
    displayName: Namespace deprovisioning
    jobs:
      - job: namespace_deprovisioning
        displayName: Removing namespace
        pool:
          ${{ if ne(parameters['pool'], 'ubuntu-latest') }}:
            name: ${{ parameters.pool }}
          ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
            vmImage: ${{ parameters.pool }}
        steps:
          - template: templates/terraform-outputs.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              workingDirectory: ${{ parameters.workingDirectory }}/terraform/${{ parameters.infrastructureModule }}
              terraformVersion: ${{ parameters.terraformVersion }}
              terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
              terraformSaName: ${{ parameters.terraformSaName }}
              terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

          - ${{ if not(parameters.skipKubectlInstall) }}:
            - template: templates/kubectl/kubectl-installer.yml
              parameters:
                kubectlVersion: ${{ parameters.kubectlVersion }}
                
          - ${{ if not(parameters.skipAksLogon) }}:
            - template: templates/azcli/aks-get-credentials.yml
              parameters:
                aksClusterName: ${{ parameters.aksClusterName }}
                aksClusterResourceGroup: ${{ parameters.aksClusterResourceGroup }}
                azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
                workingDirectory: ${{ parameters.workingDirectory }}

          - template: templates/helm/helm-uninstall.yml
            parameters:
              azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
              aksClusterName: ${{ parameters.aksClusterName }}
              aksClusterResourceGroup: ${{ parameters.aksClusterResourceGroup }}
              helmReleaseName: ${{ parameters.helmReleaseName }}
              namespace: ${{ parameters.namespace }}
              helmVersion: ${{ parameters.helmVersion }}
          
          - template: templates/kubectl/delete.yml
            parameters:
              resourceType: namespace
              resourceName: ${{ parameters.namespace }}
              namespace: ${{ parameters.namespace }}
              workingDirectory: ${{ parameters.workingDirectory }}