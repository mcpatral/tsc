parameters:
  - name: azureServiceConnectionName
    type: string
  - name: terraformVersion
    type: string
  - name: kubectlVersion
    type: string
  - name: terraformResourceGroupName
    displayName: 'Resource group for Terraform state of environment'
    type: string
  - name: terraformSaName
    displayName: 'Storage Account name for Terraform state of environment'
    type: string
  - name: enablersModule
    displayName: 'Enablers module name'
    type: string
  - name: infrastructureModule
    displayName: 'Infrastructure module name'
    type: string
  - name: terraformBackendContainerName
    displayName: 'SA Container name for Terraform state of environment'
    type: string
  - name: verticaClientVersion
    displayName: 'Vertica client version'
    type: string
  - name: verticaDatabasePort
    displayName: 'Vertica database connection port'
    type: string
  - name: pool
    displayName: 'Agent pool name'
    type: string
  - name: ddlGeneratorPath
    displayName: 'DDL generator path'
    type: string
  - name: runDdlGenerator
    displayName: 'Run DDL generator for sql files'
    type: boolean
  - name: additionalArgsDdlGenerator
    displayName: 'Additional arguments for DDL generator'
    type: string
  - name: ddlExecutorPath
    displayName: 'DDL executor path'
    type: string
  - name: verticaEncryptEnabler
    displayName: 'vertica encrypt enabler path'
    type: string
  - name: pyDdlScriptsDependenciesRequirementsPath
    displayName: 'Vertica DDL scripts depenedcies requirements path'
    type: string
  - name: pyDdlScriptsRequirementsPath
    displayName: 'Vertica DDL scripts requirements path'
    type: string
  - name: keyVaultName
    displayName: 'Master keyVault name'
    type: string
  - name: keyVaultSecretNames
    displayName: 'Key vault secret names'
    type: object
    default: []
  - name: dependsOn
    type: object
    default: []
  - name: condition
    displayName: Condition to run the stage
    type: string
    default: ""

stages:
- stage: Database_scripts_execution
  displayName: 'Vertica database scripts execution'
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  jobs:
  - job: Database_scripts_execution
    displayName: 'Vertica database scripts execution'
    pool: 
      ${{ if ne(parameters['pool'], 'ubuntu-latest') }}:
        name: ${{ parameters.pool }}
      ${{ if eq(parameters['pool'], 'ubuntu-latest') }}:
        vmImage: ${{ parameters.pool }}
    steps:
      - task: PipAuthenticate@1
        inputs:
          artifactFeeds: "$(project_name)/$(common_feed_name)"
        displayName: 'Authentication to azure feed'

      - template: templates/terraform-outputs.yml
        parameters:
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)/terraform/${{ parameters.enablersModule }}
          terraformVersion: ${{ parameters.terraformVersion }}
          terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
          terraformSaName: ${{ parameters.terraformSaName }}
          terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

      - template: templates/terraform-outputs.yml
        parameters:
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)/terraform/${{ parameters.infrastructureModule }}
          terraformVersion: ${{ parameters.terraformVersion }}
          terraformResourceGroupName: ${{ parameters.terraformResourceGroupName }}
          terraformSaName: ${{ parameters.terraformSaName }}
          terraformBackendContainerName: ${{ parameters.terraformBackendContainerName }}

      - template: templates/azcli/aks-get-credentials.yml
        parameters:
          aksClusterName: $(terraform_out_aks_cluster_name_main)
          aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)

      - template: templates/azcli/kv-get-secrets.yml
        parameters:
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          keyVaultName: ${{ parameters.keyVaultName }}
          keyVaultSecretNames: ${{ parameters.keyVaultSecretNames }}

      - template: templates/utils/get-agent-ip.yml
        parameters:
          workingDirectory: $(Build.SourcesDirectory)

      - template: templates/azcli/aks-get-authorized-ips.yml
        parameters:
          aksClusterName: $(terraform_out_aks_cluster_name_main)
          aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)

      - template: templates/azcli/aks-update-authorized-ips.yml
        parameters:
          aksClusterName: $(terraform_out_aks_cluster_name_main)
          aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
          authorizedIpRanges: $(baseRange),$(agentIp)
          waitAfterUpdate: true
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)

      - template: templates/utils/binary-install.yml
        parameters:
          binaryName: vsql
          binaryVersion: ${{ parameters.verticaClientVersion }}
          validationCommand: vsql --version

      - template: templates/python/pip-install-package.yml
        parameters:
          commandArgs: '-r $(Build.SourcesDirectory)/${{ parameters.pyDdlScriptsDependenciesRequirementsPath }}'

      - template: templates/python/pip-install-package.yml
        parameters:
          commandArgs: '-r $(Build.SourcesDirectory)/${{ parameters.pyDdlScriptsRequirementsPath }} --target=$(Build.SourcesDirectory)'

      - template: templates/vertica/ddl-scripts-execution.yml
        parameters:
          ddlExecutorPath: ${{ parameters.verticaEncryptEnabler }}
          verticaArguments: >-
            "vertica.$(terraform_out_private_dns_zone_name_intrum)"
            ${{ parameters.verticaDatabasePort }}
            $(verticasuname)
            $(verticasupassword)
            $(Build.SourcesDirectory)/vertica_encrypt
            "$(verticatlskey)"
            "$(verticatlscrt)"
          workingDirectory: "$(Build.SourcesDirectory)"

      - ${{ if parameters.runDdlGenerator }}:
        - template: templates/vertica/generate-ddl-scripts.yml
          parameters:
            ddlGeneratorPath: ${{ parameters.ddlGeneratorPath }}
            additionalArgsDdlGenerator: ${{ parameters.additionalArgsDdlGenerator }}
            workingDirectory: $(Build.SourcesDirectory)

      - template: templates/vertica/ddl-scripts-execution.yml
        parameters:
          ddlExecutorPath: ${{ parameters.ddlExecutorPath }}
          verticaArguments: >-
            $(terraform_in_environment_type)
            "vertica.$(terraform_out_private_dns_zone_name_intrum)"
            ${{ parameters.verticaDatabasePort }}
            $(verticasuname)
            $(verticasupassword)
            $(Build.SourcesDirectory)/ddl_files
          workingDirectory: "$(Build.SourcesDirectory)"

      - template: templates/azcli/aks-update-authorized-ips.yml
        parameters:
          aksClusterName: $(terraform_out_aks_cluster_name_main)
          aksClusterResourceGroup: $(terraform_out_aks_cluster_resource_group_name_main)
          authorizedIpRanges: $(baseRange)
          condition: and(always(), eq(variables.updatedAksApi, 'true'))
          waitAfterUpdate: false
          azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
          workingDirectory: $(Build.SourcesDirectory)
