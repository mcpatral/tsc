parameters:
  - name: name  # defaults for any parameters that aren't specified
    default: ''
  - name: azureServiceConnectionName
    type: string
    default: 'sc_datamngtdev_poc'
  - name: env
    type: string
  - name: storageAccount
    type: string
    default: 'sabackupsdademo'
  - name: storageAccountVertica
    type: string
    default: 'saverticadademo'
  - name: resource
    type: string

stages:
- stage: BackupKV
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    condition: and(succeeded(), eq('${{ parameters.resource }}', 'keyvault'))
    variables:
    - name: kv_name
      value: "kv-da-${{parameters.env}}-we-01"
    - name: containerName
      value: "daily"
    steps:
    - script: "dos2unix azure_pipelines/scripts/backup-kv.sh"
    - task: AzureCLI@2
      displayName: 'Executing KeyVault Backups'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnectionName }}'
        scriptType: bash
        scriptPath: 'azure_pipelines/scripts/backup-kv.sh'
        arguments: '-k $(kv_name) -s ${{ parameters.storageAccount }} -c $(containerName)'

- stage: BackupAML
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    condition: and(succeeded(), eq('${{ parameters.resource }}', 'MLmodels'))
    variables:
    - name: resourceGroupName
      value: "rg-aml-da-${{parameters.env}}"
    - name: workspaceName
      value: "amlwda${{parameters.env}}"
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnectionName }}'
        scriptType: 'pscore'
        scriptLocation: 'scriptPath'
        scriptPath: 'azure_pipelines/scripts/backup-model.ps1'
        arguments: '-env ${{parameters.env}} -resourceGroupName  $(resourceGroupName) -workspaceName $(workspaceName) -storageAccountName  ${{parameters.storageAccount}}'
        powerShellErrorActionPreference: 'continue'
      displayName: "Executing Models Backups"


- stage: BackupVertica
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    condition: and(succeeded(), eq('${{ parameters.resource }}', 'VerticaBackup'))
    steps:
    - script: "dos2unix azure_pipelines/scripts/backup-vertica.sh"
    - task: AzureCLI@2
      displayName: 'Executing Vertica Backup'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnectionName }}'
        scriptType: bash
        scriptPath: 'azure_pipelines/scripts/backup-vertica.sh'
        arguments: '-s ${{parameters.storageAccount}} -y ${{parameters.storageAccountVertica}} -m $(client_id) -n $(client_secret) -o $(tenant_id)'