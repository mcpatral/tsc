parameters:
  - name: name  # defaults for any parameters that aren't specified
    default: ''
  - name: azureServiceConnectionName
    type: string
    default: 'sc_datamngtdev_poc'
  - name: env
    type: string
  - name: storageAccount
    type: string
    default: 'sabackupsdademo'
  - name: storageAccountVertica
    type: string
    default: 'saverticadademo'
  - name: filerestore
    type: string
    default: ''
  - name: resource
    type: string
  - name: secretRestore
    type: string
    default: ''

stages:
- stage: RestoreKV
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    condition: and(succeeded(), eq('${{ parameters.resource }}', 'keyvault'))
    variables:
    - name: kv_name
      value: "kv-da-${{parameters.env}}-we-01"
    - name: containerName
      value: "kv-backup-${{ parameters.env }}"
    steps:
    - script: "dos2unix azure_pipelines/scripts/restore-kv.sh"
    - task: AzureCLI@2
      displayName: 'Executing KeyVault Restore'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnectionName }}'
        scriptType: bash
        scriptPath: 'azure_pipelines/scripts/restore-kv.sh'
        # arguments: '-k ${{ parameters.kv_name }} -s ${{ parameters.storageAccount }} -c $(containerName) -z ${{ parameters.filerestore }} -r ${{ parameters.secretRestore }}'

# - stage: Restore
#   variables:
#   - group: ServicePrincipal
#   jobs:
#   - job:
#     condition: and(succeeded(), eq('${{ parameters.resource }}', 'storageaccount'))
#     steps:
#     - task: AzureCLI@2
#       displayName: 'Azure CLI azure_pipelines/scripts/storageaccount_restore.sh'
#       inputs:
#         azureSubscription: '${{ parameters.azureServiceConnectionName }}'
#         scriptType: bash
#         scriptPath: 'azure_pipelines/scripts/storageaccount_restore.sh'
#         arguments: '-s sadadevopsbackups -c backups -z ${{ parameters.filerestore }} -b $(accountKeyBackup) -i sadadevopsrestore -r $(accountKeyRestore)'


- stage: RestoreVertica
  variables:
  - group: ServicePrincipal
  jobs:
  - job:
    condition: and(succeeded(), eq('${{ parameters.resource }}', 'VerticaRestore'))
    steps:
    - script: "dos2unix azure_pipelines/scripts/restore-vertica.sh"
    - task: AzureCLI@2
      displayName: 'Executing Vertica Restore'
      inputs:
        azureSubscription: '${{ parameters.azureServiceConnectionName }}'
        scriptType: bash
        scriptPath: 'azure_pipelines/scripts/backup-vertica.sh'
        arguments: '-s ${{parameters.storageAccount}} -y ${{parameters.storageAccountVertica}} -m $(client_id) -n $(client_secret) -o $(tenant_id)'