parameters:
- name: azureServiceConnectionName
  displayName: Azure Service Connection name
  type: string
- name: pool
  displayName: Agent pool to run the jobs.
  type: string
- name: resourceGroupName
  displayName: Environment resource group name
  type: string
  default: null
- name: dnsZoneSubscriptionID
  displayName: Private DNS zone's for A records subscription ID
  type: string
- name: dnsZoneResourceGroupName
  displayName: DNS Zone Resource Group Name
  type: string
- name: privateEndpointResourceGroupName
  displayName: Private Enpoint Resource Group Name
  type: string
- name: kubectlVersion
  displayName: Kubectl version
  type: string
- name: helmVersion
  displayName: Helm version
  type: string
- name: condition
  displayName: Run conditions for task
  type: string
  default: ""
- name: mainPipelineExecution
  displayName: Main pipeline execution
  type: boolean
  default: false
- name: dnsRecordsModules
  displayName: DNS Records
  type: object
  default: []
- name: dependsOn
  type: object
  default: []
- name: additionalADnsRecords
  displayName: Additional A Dns Records
  type: object
  default: []
- name: additionalPrivateDnsZones
  displayName: Additional Private Dns Zones
  type: object
  default: []

jobs:
- job: rotate_a_dns_records
  displayName: Rotate A records in Private DNS Zones
  pool:
    ${{ if ne(parameters.pool, 'ubuntu-latest') }}:
      name: ${{ parameters.pool }}
    ${{ if eq(parameters.pool, 'ubuntu-latest') }}:
      vmImage: ${{ parameters.pool }}
  dependsOn: ${{ parameters.dependsOn }}
  ${{ if ne(parameters.condition, '') }}:
    condition: ${{ parameters.condition }}
  variables:
    ${{ if eq(parameters.mainPipelineExecution, true) }}:
      ${{ each dnsRecordsModule in parameters.dnsRecordsModules }}:
        stage_result_${{ dnsRecordsModule.module }}: $[ stageDependencies.${{ dnsRecordsModule.module }}.${{ dnsRecordsModule.module }}_apply.result ]
        stage_result_${{ dnsRecordsModule.module }}_install: $[ stageDependencies.${{ dnsRecordsModule.module }}.${{ dnsRecordsModule.module }}_install.result ]
        stage_result_${{ dnsRecordsModule.module }}_on_public_agent: $[ stageDependencies.${{ dnsRecordsModule.module }}_on_public_agent.${{ dnsRecordsModule.module }}_apply.result ]
        stage_result_${{ dnsRecordsModule.module }}_on_private_agent: $[ stageDependencies.${{ dnsRecordsModule.module }}_on_private_agent.${{ dnsRecordsModule.module }}_apply.result ]
    ${{ each dnsRecordsModule in parameters.dnsRecordsModules }}:
      ${{ dnsRecordsModule.module }}_rotate: 'yes'
  steps:
  - ${{ each dnsRecordsModule in parameters.dnsRecordsModules }}:
    - template: templates/rotate-a-dns-records-steps.yml
      parameters:
        azureServiceConnectionName: ${{ parameters.azureServiceConnectionName }}
        aksResourceGroupName: ${{ parameters.resourceGroupName }}
        dnsZoneSubscriptionID: ${{ parameters.dnsZoneSubscriptionID }}
        dnsZoneResourceGroupName: ${{ parameters.dnsZoneResourceGroupName }}
        privateEndpointResourceGroupName: ${{ parameters.privateEndpointResourceGroupName }}
        kubectlVersion: ${{ parameters.kubectlVersion }}
        ${{ if eq(parameters.mainPipelineExecution, true) }}: 
          condition: and(not(failed()), not(canceled()), or(eq('${{ dnsRecordsModule.when }}','always_'), not(or(eq(variables.stage_result_${{ dnsRecordsModule.module }}, 'Succeeded'), eq(variables.stage_result_${{ dnsRecordsModule.module }}_on_public_agent, 'Succeeded'), eq(variables.stage_result_${{ dnsRecordsModule.module }}_on_private_agent, 'Succeeded'), eq(variables.stage_result_${{ dnsRecordsModule.module }}_install, 'Succeeded')))))
        ${{ if eq(parameters.mainPipelineExecution, false) }}: 
          condition: and(not(failed()), not(canceled()))
        privateDns:
          - ${{ each additionalPrivateDnsZone in parameters.additionalPrivateDnsZones }}:
            - substring: ${{ additionalPrivateDnsZone.substring }}
              name: ${{ additionalPrivateDnsZone.name }}
          - substring: blob
            name: privatelink.blob.core.windows.net
          - substring: dfs
            name: privatelink.dfs.core.windows.net
          - substring: file
            name: privatelink.file.core.windows.net
          - substring: vault
            name: privatelink.vaultcore.azure.net
          - substring: postgresql
            name: "psql.privatedns.$(terraform_in_environment_type).$(terraform_in_project).postgres.database.azure.com"
          - substring: registry
            name: privatelink.azurecr.io
          - substring: internal_service
            name: "$(terraform_in_environment_type).da.intrum.cloud"
          - substring: agentsvc
            name: privatelink.agentsvc.azure-automation.net
          - substring: azuremonitor
            name: privatelink.monitor.azure.com
          - substring: ods
            name: privatelink.ods.opinsights.azure.com
          - substring: oms
            name: privatelink.oms.opinsights.azure.com
        aDnsRecords:
          - ${{ each additionalADnsRecord in parameters.additionalADnsRecords }}:
            - name: ${{ additionalADnsRecord.name }}
              targetResourceSubstring: ${{ additionalADnsRecord.targetResourceSubstring }}
              fromPrivateEndpoint: ${{ additionalADnsRecord.fromPrivateEndpoint }}
              usePrivateEndpointName: ${{ additionalADnsRecord.usePrivateEndpointName }}
              privateEndpointName: ${{ additionalADnsRecord.privateEndpointName }}
              ttl_seconds: ${{ additionalADnsRecord.ttl_seconds }}
              dnsSubstrings: 
                - ${{ each dnsSubstring in additionalADnsRecord.dnsSubstrings }}:
                  - subresource: ${{ dnsSubstring.subresource }}
                    peFqdnSuffix: ${{ dnsSubstring.peFqdnSuffix }}
                    ipAddress: ${{ dnsSubstring.ipAddress }}
          - ${{ if or(eq(dnsRecordsModule.module, 'enablers'), eq(dnsRecordsModule.module, 'pair_enablers')) }}:
            - name: acr$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)main
              targetResourceSubstring: acrmain
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: registry
                  peFqdnSuffix: ".azurecr.io"
            - name: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-master
              targetResourceSubstring: kvmaster
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: vault
            - name: kv-$(terraform_in_subscription_type)-$(terraform_in_project)-$(terraform_in_location_short_central)-test
              targetResourceSubstring: kvtest
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: vault
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)tfstate
              targetResourceSubstring: satfstate
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
            - name: api
              targetResourceSubstring: private_link_scoped_api
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: global.in.ai
              targetResourceSubstring: private_link_scoped_global_in_ai
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: global.handler.control
              targetResourceSubstring: private_link_scoped_global_handler_control
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: diagservices-query
              targetResourceSubstring: private_link_scoped_diagservices_query
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: live
              targetResourceSubstring: private_link_scoped_live
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: profiler
              targetResourceSubstring: private_link_scoped_profiler
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: snapshot
              targetResourceSubstring: private_link_scoped_snapshot
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: azuremonitor
                  peFqdnSuffix: ".monitor.azure.com"
            - name: scadvisorcontentpl
              targetResourceSubstring: private_link_scoped_scadvisorcontentpl
              fromPrivateEndpoint: true
              usePrivateEndpointName: true
              privateEndpointName: pe-pls-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main-azuremonitor
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
                  peFqdnSuffix: ".blob.core.windows.net"
          - ${{ if or(eq(dnsRecordsModule.module, 'infrastructure'), eq(dnsRecordsModule.module, 'pair_infrastructure')) }}:
            # - name: acr$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)aml
            #   targetResourceSubstring: acraml
            #   fromPrivateEndpoint: true
            #   usePrivateEndpointName: false
            #   ttl_seconds: 10
            #   dnsSubstrings:
            #     - subresource: registry
            #       peFqdnSuffix: ".azurecr.io"
            # - name: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-aml
            #   targetResourceSubstring: kvaml
            #   fromPrivateEndpoint: true
            #   usePrivateEndpointName: false
            #   ttl_seconds: 10
            #   dnsSubstrings:
            #     - subresource: vault
            - name: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-dbw
              targetResourceSubstring: kvdbw
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: vault
            - name: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main
              targetResourceSubstring: kvmain
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: vault
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)airflow
              targetResourceSubstring: saairflow
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_pair_location_short)airflow
              targetResourceSubstring: saairflowpair
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)dl
              targetResourceSubstring: sadl
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
                - subresource: dfs
                - subresource: file
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)metastore
              targetResourceSubstring: sametastore
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: dfs
            - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)temp
              targetResourceSubstring: satemp
              fromPrivateEndpoint: true
              usePrivateEndpointName: false
              ttl_seconds: 10
              dnsSubstrings:
                - subresource: blob
                - subresource: dfs
            # - name: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)vertica
            #   targetResourceSubstring: savertica
            #   fromPrivateEndpoint: true
            #   usePrivateEndpointName: false
            #   ttl_seconds: 10
            #   dnsSubstrings:
            #     - subresource: blob
          # - ${{ if eq(dnsRecordsModule.module, 'vertica_deployment') }}:
          #   - name: vertica
          #     targetResourceSubstring: vertica
          #     fromPrivateEndpoint: false
          #     ttl_seconds: 3600
          #     aksPreRotation: true
          #     aksPreRotationCondition: true
          #     aksPostRotation: true
          #     aksPostRotationCondition: or(ne(variables.airflow_deployment_rotate, 'yes'), eq(variables.stage_result_airflow_deployment_install, 'Succeeded'))
          #     aksClusterName: aks-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)-main
          #     serviceName: $(vertica_helm_release_name)-vertica-connections
          #     namespace: $(vertica_namespace)
          #     dnsSubstrings:
          #       - subresource: internal_service
          - ${{ if eq(dnsRecordsModule.module, 'airflow_deployment') }}:
            - name: airflow
              targetResourceSubstring: airflow
              fromPrivateEndpoint: false
              ttl_seconds: 3600
              aksPreRotation: true
              aksPreRotationCondition: or(ne(variables.vertica_deployment_rotate, 'yes'), eq(variables.stage_result_vertica_deployment_install, 'Succeeded'))
              aksPostRotation: true
              aksPostRotationCondition: true
              aksClusterName: aks-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)-main
              serviceName: $(ingress_helm_release_name)-controller
              namespace: $(ingress_namespace)
              dnsSubstrings:
                - subresource: internal_service

  - ${{ if eq(parameters.mainPipelineExecution, true) }}:
    - template: templates/utils/timeout.yml
      parameters:
        secondsToWait: "30"
        workingDirectory: $(System.DefaultWorkingDirectory)