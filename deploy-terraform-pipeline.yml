trigger: none

parameters:
  - name: environmentName
    displayName: Variable group name for environment to deploy
    type: string
  - name: deployPairInfrastructure
    default: false
    type: boolean
  - name: rotateDnsRecords
    default: false
    type: boolean
  - name: restoreFromPairToMain
    displayName: Restore postgresql and airflow SA blobs from pair to main
    default: false
    type: boolean
  - name: initCommonTables
    type: boolean
    default: false
  - name: forceDelete
    type: boolean
    default: false

variables:
  - group: ${{ parameters.environmentName }}
  - name: terraformVersion
    value: "1.5.0"
  - name: kubectlVersion
    value: "1.27.3"
  - name: helmVersion
    value: "3.12.1"
  - ${{ if not(parameters.deployPairInfrastructure) }}:
    - name: aksDevOpsNamespace
      value: ${{ parameters.environmentName }}-agentpool
    - name: azureDevOpsPool
      value: ${{ parameters.environmentName }}-agentpool
    - name: locationInfra
      value: $(terraform_in_location)
    - name: locationInfraShort
      value: $(terraform_in_location_short)
    - name: enablersModule
      value: enablers
    - name: infrastructureModule
      value: infrastructure
    - name: sourceEnablersModule
      value: pair_enablers
    - name: sourceInfrastructureModule
      value: pair_infrastructure
    - name: contentModule
      value: content
    - name: databricksAirflowPatTokenName
      value: 'airflowdbwpattoken'
    - name: databricksAirflowPatTokenId
      value: 'airflowdbwidpattoken'
    - name: saAirflowKeyName
      value: 'saairflowkey'
    - ${{ if parameters.restoreFromPairToMain }}:
      - name: terraform_in_restore_from_pair_to_main
        value: 'true'
  - ${{ if parameters.deployPairInfrastructure }}:
    - name: aksDevOpsNamespace
      value: ${{ parameters.environmentName }}-pair-agentpool
    - name: azureDevOpsPool
      value: ${{ parameters.environmentName }}-pair-agentpool
    - name: locationInfra
      value: $(terraform_in_pair_location)
    - name: locationInfraShort
      value: $(terraform_in_pair_location_short)
    - name: enablersModule
      value: pair_enablers
    - name: infrastructureModule
      value: pair_infrastructure
    - name: sourceEnablersModule
      value: enablers
    - name: sourceInfrastructureModule
      value: infrastructure
    - name: contentModule
      value: pair_content  
    - name: databricksAirflowPatTokenName
      value: 'airflowdbwpattokenpair'
    - name: databricksAirflowPatTokenId
      value: 'airflowdbwidpattokenpair'
    - name: saAirflowKeyName
      value: 'saairflowkeypair'
  - name: terraformResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-state
  - name: terraformSaName
    value: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)tfstate
  - name: terraformBackendContainerName
    value: $(terraform_in_environment_type)tfstate
  - name: terraformPlanContainerName
    value: $(terraform_in_environment_type)tfplan
  - name: masterKeyVaultName
    value: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-master
  - name: mainKeyVaultName
    value: kv-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)-main
  - name: paasResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(terraform_in_location_short)
  - name: mainResourceGroupName
    value: rg-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)
  - name: aksDevOpsClusterName
    value: aks-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)-devops-agents
  - name: azureDevOpsUrl
    value: "https://dev.azure.com/intrum-catalyst"
  - name: publicPoolName
    value: ubuntu-latest
  # Databricks upload parameters libraries
  - name: artifactsDirectoryPath
    value: 'artifacts'
  - name: databricksPackageUploadPath
    value: 'FileStore/wheels'
  # Databricks upload parameters notebooks
  - name: notebookName
    value: system_initialization
  - name: notebookLanguage
    value: 'PYTHON'
  - name: notebookFolder
    value: 'notebooks'
  - name: notebookLocalPath
    value: './${{ variables.notebookFolder }}/*'
  - name: miscScriptsFolder
    value: 'misc_scripts'
  - name: miscScriptsLocalPath
    value: './${{ variables.miscScriptsFolder }}/*'    
  - name: databricksRemotePath
    value: '/Shared/'
  - name: wheelsPackagesRemoteFileStore
    value: '/dbfs/FileStore/wheels/'
  - name: testRepositoryCheckout
    value: 'test-suite'  
  - name: devopsRepositoryCheckout
    value: 'self'
  # Build/Publish dags to Azure feed
  # Note: For infra pipeline dags package will be downloaded from Azure feed
  - name: downloadAirflowDags
    value: true
  # Maven test suite pom file path, goals & profile
  - name: mavenPomFile
    value: 'test-suite/pom.xml'
  - name: mavenGoal
    value: 'clean test'
  - name: mavenProfile
    value: 'deployment_check'
  # Shared resources repository params
  - name: sharedResourcesRepositoryCheckout
    value: 'shared-resources'
  - name: csvFilePath
    value: 'shared-resources/libs_version/databricks_packages.csv'
  - name: notebookRequirementsPath
    value: 'shared-resources/requirements/python/notebooks/requirements.txt'
  - name: dagsRequirementsPath
    value: 'shared-resources/requirements/python/dags/airflow/requirements.txt' 

resources:
  repositories:
  - repository: airflow-dags
    type: git
    name: igtpoc/airflow-dags
    ref: main
  - repository: test-suite
    type: git
    name: igtpoc/test-suite
    ref: main
  - repository: shared-resources
    type: git
    name: igtpoc/shared-resources
    ref: main

stages:
  - ${{ if or(not(parameters.deployPairInfrastructure), and(parameters.deployPairInfrastructure, not(parameters.restoreFromPairToMain))) }}:
    - template: azure_pipelines/terraform-prep-stage.yml
      parameters:
        stageName: preparation_phase
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformLocation: $(terraform_in_location)
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        privatePoolName: ${{ variables.azureDevOpsPool }} 
        publicPoolName: ${{ variables.publicPoolName }}
        azureDevOpsUrl: ${{ variables.azureDevOpsUrl }}
        keyVaultName: ${{ variables.masterKeyVaultName }}
        acrRepositoryVersion: $(source_acr_devops_agent_version)
        aksDevOpsClusterName: ${{ variables.aksDevOpsClusterName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        enablersModule: ${{ variables.enablersModule }}
        condition: and(not(canceled()), not(failed()), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        destroy: false
        destroyTerraformStorageAccount: false

    - template: azure_pipelines/terraform-stages.yml
      parameters:
        module: ${{ variables.enablersModule }}
        stageNameSuffix: _on_public_agent
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        keyVaultName: ${{ variables.masterKeyVaultName }}
        pool: ${{ variables.publicPoolName }}
        condition: or(and(not(canceled()), not(failed()), in(dependencies.preparation_phase.result, 'Succeeded', 'Skipped', ''), in(stageDependencies.preparation_phase.outputs['selectPrivatePool.poolChoice.pool_type'], 'public', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas'])))), eq(variables.force_public_agent, 'true'))
        saPublicAccessUpdate: true
        dependsOn:
          - preparation_phase
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        rotateDnsRecords: ${{ parameters.rotateDnsRecords }}
        dnsRecordsModules:
          - module: ${{ variables.enablersModule }}
            when: always_

    - template: azure_pipelines/terraform-stages.yml
      parameters:
        module: ${{ variables.enablersModule }}
        stageNameSuffix: _on_private_agent
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        keyVaultName: ${{ variables.masterKeyVaultName }}
        pool: ${{ variables.azureDevOpsPool }} 
        condition: and(and(not(canceled()), not(failed()), in(dependencies.preparation_phase.result, 'Succeeded', 'Skipped', ''), in(stageDependencies.preparation_phase.outputs['selectPrivatePool.poolChoice.pool_type'], 'private', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas'])))), eq(variables.force_public_agent, 'false'))
        saPublicAccessUpdate: false
        dependsOn:
          - preparation_phase
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        rotateDnsRecords: ${{ parameters.rotateDnsRecords }}
        dnsRecordsModules:
          - module: ${{ variables.enablersModule }}
            when: always_

    #TODO probably this stage could be avoided when deploying pair infrastructure
    - template: azure_pipelines/acr-sync-stage.yml
      parameters:
        useDocker: false
        stageNameSuffix: _on_private_agent
        pool: ${{ variables.azureDevOpsPool }} 
        sourceAzureServiceConnectionName: $(source_acr_service_principal_name)
        targetAzureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        sourceAcrName: $(source_acr_name)
        sourceAcrRg: $(source_acr_rg)
        sourceAcrSubscriptionId: $(source_acr_subscription_id)
        paasResourceGroupName: ${{ variables.paasResourceGroupName }}
        enablersModule: ${{ variables.enablersModule }}
        imageNames:
          - "$(source_acr_devops_agent_repo):$(source_acr_devops_agent_version)"
          - images/ingress-nginx/controller:$(ingress_nginx_tag)
          - images/ingress-nginx/kube-webhook-certgen:$(kube_webhook_certgen_tag)
          # - images/vertica/verticadb-operator:$(vertica_operator_tag)
          # - images/vertica/vertica-k8s:$(vertica_tag)
          # - images/vertica/vertica-logger:$(vertica_logger_tag)
          - images/airflow:$(airflow_tag)
          - images/envoy-sidecar-helper:$(envoy_helper_tag)
          - images/buildkit:$(buildx_tag)
        condition: and(and(not(canceled()), not(failed()), in(dependencies.${{ variables.enablersModule }}_on_private_agent.result, 'Succeeded', 'Skipped', ''), in(stageDependencies.preparation_phase.outputs['selectPrivatePool.poolChoice.pool_type'], 'private', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas'])))), eq(variables.force_public_agent, 'false'))
        saPublicAccessUpdate: false
        dependsOn:
          - ${{ variables.enablersModule }}_on_private_agent

    - template: azure_pipelines/acr-sync-stage.yml
      parameters:
        useDocker: true
        stageNameSuffix: _on_public_agent
        pool: ${{ variables.publicPoolName }} 
        sourceAzureServiceConnectionName: $(source_acr_service_principal_name)
        targetAzureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        sourceAcrName: $(source_acr_name)
        sourceAcrRg: $(source_acr_rg)
        sourceAcrSubscriptionId: $(source_acr_subscription_id)
        paasResourceGroupName: ${{ variables.paasResourceGroupName }}
        enablersModule: ${{ variables.enablersModule }}
        imageNames:
          - "$(source_acr_devops_agent_repo):$(source_acr_devops_agent_version)"
          - images/ingress-nginx/controller:$(ingress_nginx_tag)
          - images/ingress-nginx/kube-webhook-certgen:$(kube_webhook_certgen_tag)
          # - images/vertica/verticadb-operator:$(vertica_operator_tag)
          # - images/vertica/vertica-k8s:$(vertica_tag)
          # - images/vertica/vertica-logger:$(vertica_logger_tag)
          - images/airflow:$(airflow_tag)
          - images/envoy-sidecar-helper:$(envoy_helper_tag)
          - images/buildkit:$(buildx_tag)
        condition: or(and(not(canceled()), not(failed()), in(dependencies.${{ variables.enablersModule }}_on_public_agent.result, 'Succeeded', 'Skipped', ''), in(stageDependencies.preparation_phase.outputs['selectPrivatePool.poolChoice.pool_type'], 'public', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas'])))), eq(variables.force_public_agent, 'true'))
        saPublicAccessUpdate: true
        dependsOn:
          - ${{ variables.enablersModule }}_on_public_agent

    - template: azure_pipelines/provision-enablers-stages.yml
      parameters:
        stageName: provision_enablers
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        acrRepositoryName: $(source_acr_devops_agent_repo)
        acrRepositoryVersion: $(source_acr_devops_agent_version)
        enablersModule: ${{ variables.enablersModule }}
        aksDevOpsNamespace: ${{ variables.aksDevOpsNamespace }} 
        azureDevOpsPool: ${{ variables.azureDevOpsPool }} 
        azureDevOpsUrl: ${{ variables.azureDevOpsUrl }}
        agentsReplicas: $(devops_agents_replicas)
        keyVaultName: ${{ variables.masterKeyVaultName }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        calicoVersion: $(calico_version)
        calicoNamespace: $(calico_namespace)
        osmVersion: $(osm_version)
        osmNamespace: $(osm_namespace)
        pool: ${{ variables.publicPoolName }}
        condition: and(not(canceled()), not(failed()), or(succeeded('acr_sync_on_private_agent'), succeeded('acr_sync_on_public_agent'), and(in(dependencies.acr_sync_on_private_agent.result, 'Skipped', ''), in(dependencies.acr_sync_on_public_agent.result, 'Skipped', ''))), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - acr_sync_on_private_agent
          - acr_sync_on_public_agent

    - ${{ if parameters.restoreFromPairToMain }}:
      - template: azure_pipelines/terraform-geo-recover-stage.yml
        parameters:
          azureServiceConnectionName: $(azure_service_principal_name)
          terraformVersion: ${{ variables.terraformVersion }}
          kubectlVersion: ${{ variables.kubectlVersion }}
          helmVersion: ${{ variables.helmVersion }}
          terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
          terraformSaName: ${{ variables.terraformSaName }}
          terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
          pool: ${{ variables.azureDevOpsPool }}
          saPublicAccessUpdate: false
          geoRecoverTo: main
          mainResourceGroupName: ${{ variables.mainResourceGroupName }}
          location: $(locationInfra)
          enablersModule: ${{ variables.enablersModule }}
          infrastructureModule: ${{ variables.infrastructureModule }}
          sourceInfrastructureModule: ${{ variables.sourceInfrastructureModule }}
          dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
          dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
          postgresServerName: "psqlflexsrv-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)"
          postgresSubnetName: "subnet-$(terraform_in_environment_type)-$(terraform_in_project)-$(locationInfraShort)-postgres"
          mainPipelineExecution: true
          condition: and(not(canceled()), not(failed()), in(dependencies.provision_enablers.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
          dependsOn:
            - provision_enablers

    - template: azure_pipelines/terraform-stages.yml
      parameters:
        module: ${{ variables.infrastructureModule }}
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        keyVaultName: ${{ variables.masterKeyVaultName }}
        ${{ if not(parameters.deployPairInfrastructure) }}:
          keyVaultSecretNames: 
            - psqladminuser
            - psqladminpwd
            - psqlairflowuser
            - psqlairflowpwd
            # - verticasuname
            # - verticasupassword
            # - verticatlskey
            # - verticatlscrt
            # - verticatlscakey
            # - verticatlscacrt
            # - verticatlswebhookkey
            # - verticatlswebhookcrt
            # - verticadbwritername
            # - verticadbwriterpassword  
            - airflowoauthspnclientid
            - airflowoauthspnclientsecret
            - airflowtenantid    
            - airflowfernetkey
            - airflowpwd 
            - databrickadmins
            - clienttlskey
            - clienttlscrt
            - airflowsmtpclientsecret
            - airflowsmtpclientid
            - airflowdbwspclientsecret
            - airflowdbwspclientid
        pool: ${{ variables.azureDevOpsPool }} 
        saPublicAccessUpdate: false
        ${{ if parameters.restoreFromPairToMain }}:
          condition: and(not(canceled()), not(failed()), in(dependencies.terraform_geo_recover.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        ${{ else }}:
          condition: and(not(canceled()), not(failed()), in(dependencies.provision_enablers.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - ${{ if parameters.restoreFromPairToMain }}:
            - terraform_geo_recover
          - ${{ if not(parameters.restoreFromPairToMain) }}:
            - provision_enablers
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        rotateDnsRecords: ${{ parameters.rotateDnsRecords }}
        dnsRecordsModules:
          - module: ${{ variables.enablersModule }}
            when: not_success
          - module: ${{ variables.infrastructureModule }}
            when: always_

    - ${{ if or(parameters.restoreFromPairToMain, parameters.deployPairInfrastructure) }}:
      - template: azure_pipelines/terraform-blob-copy-airflow-sa-stage.yml
        parameters:
          pool: ${{ variables.azureDevOpsPool }} 
          azureServiceConnectionName: $(azure_service_principal_name)
          terraformVersion: ${{ variables.terraformVersion }}
          kubectlVersion: ${{ variables.kubectlVersion }}
          helmVersion: ${{ variables.helmVersion }}
          terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
          terraformSaName: ${{ variables.terraformSaName }}
          terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
          saPublicAccessUpdate: false
          sourceEnablersModule: ${{ variables.sourceEnablersModule }}
          sourceInfrastructureModule: ${{ variables.sourceInfrastructureModule }}
          targetEnablersModule: ${{ variables.enablersModule }}
          targetInfrastructureModule: ${{ variables.infrastructureModule }}
          condition: and(not(canceled()), not(failed()), in(dependencies.${{ variables.infrastructureModule }}.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
          dependsOn:
            - ${{ variables.infrastructureModule }}
          privateEndpointResourceGroupName: ${{ variables.mainResourceGroupName }}
          dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
          dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
          airflowSaContainersToCopy:
            - dags
            - logs
          rotateDnsRecords: ${{ parameters.rotateDnsRecords }}
          dnsRecordsModules:
            - module: ${{ variables.enablersModule }}
              when: not_success

    - template: azure_pipelines/provision-infrastructure-stages.yml
      parameters:
        environmentName: ${{ parameters.environmentName }}
        pool: ${{ variables.azureDevOpsPool }} 
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        calicoVersion: $(calico_version)
        calicoNamespace: $(calico_namespace)
        osmVersion: $(osm_version)
        osmNamespace: $(osm_namespace)
        ingressNamespace: $(ingress_namespace)
        ingressHelmReleaseName: $(ingress_helm_release_name)
        ingressClientCertSecretName: $(osm_ingress_client_cert_secret_name)
        ingressVersion: $(ingress_nginx_tag) 
        kubeWebhookCertgenVersion: $(kube_webhook_certgen_tag)
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        saPublicAccessUpdate: false
        enablersModule: ${{ variables.enablersModule }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        condition: and(not(canceled()), not(failed()), or(in(dependencies.${{ variables.infrastructureModule }}.result, 'Succeeded', 'Skipped', ''), in(dependencies.blob_copy_sa_airflow.result, 'Succeeded', 'Skipped', '')), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        keyVaultName: ${{ variables.mainKeyVaultName }}
        keyVaultSecretNames: 
          - psqladminuser
          - psqladminpwd
          - psqlairflowuser
          - psqlairflowpwd
        dependsOn:
          - ${{ variables.infrastructureModule }}
          - ${{ if or(parameters.restoreFromPairToMain, parameters.deployPairInfrastructure) }}:
            - blob_copy_sa_airflow

    - template: azure_pipelines/terraform-stages.yml
      parameters:
        module: content_admin_assign
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        keyVaultName: ${{ variables.mainKeyVaultName }}
        pool: ${{ variables.azureDevOpsPool }} 
        saPublicAccessUpdate: false
        planValidateTimeout: 30
        additionalInstructions: >-
          Also, once this stage finished, please run last stage ("da_resources") in Databricks Workspace Assign pipeline. 
        condition: and(not(canceled()), not(failed()), in(dependencies.provision_infrastructure.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - provision_infrastructure
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        rotateDnsRecords: ${{ parameters.rotateDnsRecords }}        

    - template: azure_pipelines/databricks-upload-misc-scripts-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        notebookLanguage: "SOURCE"
        miscScriptsFolder: ${{ variables.miscScriptsFolder }}
        miscScriptsLocalPath: ${{ variables.miscScriptsLocalPath }}
        miscScriptsRequirementsPath: ${{ variables.notebookRequirementsPath }}
        databricksRemotePath: ${{ variables.databricksRemotePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        workingDirectory: $(Build.SourcesDirectory)
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.content_admin_assign.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - content_admin_assign       

    - template: azure_pipelines/terraform-stages.yml
      parameters:
        module: ${{ variables.contentModule }}
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        terraformPlanContainerName: ${{ variables.terraformPlanContainerName }}
        keyVaultName: ${{ variables.mainKeyVaultName }}
        pool: ${{ variables.azureDevOpsPool }} 
        saPublicAccessUpdate: false
        planValidateTimeout: 30
        additionalInstructions: >-
          Before approving this stage, please run Databricks Workspace Assign pipeline's last stage ("da_resources"). 
        keyVaultSecretNames: 
          - databrickadmins
          - airflowdbwspclientid
          - airflowdbwspclientsecret
        condition: and(not(canceled()), not(failed()), in(dependencies.databricks_upload_misc_scripts.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - databricks_upload_misc_scripts
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        rotateDnsRecords: ${{ parameters.rotateDnsRecords }}
        dnsRecordsModules:
          - module: ${{ variables.enablersModule }}
            when: not_success
          - module: ${{ variables.infrastructureModule }}
            when: not_success
          - module: ${{ variables.contentModule }}
            when: always_

    - template: azure_pipelines/airflow-databricks-token-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        resourceGroupName: ${{ variables.mainResourceGroupName }}
        keyVaultName: ${{ variables.mainKeyVaultName }}
        keyVaultSecretNames: 
          - airflowdbwspclientid
          - airflowdbwspclientsecret
        databricksSpnPatTokenName: ${{ variables.databricksAirflowPatTokenName }}
        databricksSpnPatTokenId: ${{ variables.databricksAirflowPatTokenId }}
        azClientIdName: airflowdbwspclientid
        azClientSecretName: airflowdbwspclientsecret
        infrastructureModule: ${{ variables.infrastructureModule }}
        comment: "Airflow_pat_token_creation"
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.${{ variables.contentModule }}.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - ${{ variables.contentModule }}

    - template: azure_pipelines/databricks-upload-libraries-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        csvFilePath: ${{ variables.csvFilePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        artifactsDirectoryPath: ${{ variables.artifactsDirectoryPath }}
        databricksPackageUploadPath: ${{ variables.databricksPackageUploadPath }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.service_principal_databricks_token_creation.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - service_principal_databricks_token_creation

    - template: azure_pipelines/databricks-upload-notebooks-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        notebookLanguage: ${{ variables.notebookLanguage }}
        notebookFolder: ${{ variables.notebookFolder }}
        notebookLocalPath: ${{ variables.notebookLocalPath }}
        notebookRequirementsPath: ${{ variables.notebookRequirementsPath }}
        databricksRemotePath: ${{ variables.databricksRemotePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        workingDirectory: $(Build.SourcesDirectory)
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.databricks_uploading_libraries.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - databricks_uploading_libraries
  
    - template: azure_pipelines/databricks-cluster-restart.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        contentModule: ${{ variables.contentModule }}
        infrastructureModule: ${{ variables.infrastructureModule }}        
        workingDirectory: $(Build.SourcesDirectory)
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.databricks_upload_notebook.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - databricks_upload_notebook                    

    # - template: azure_pipelines/vertica-stages.yml
    #   parameters:
    #     pool: ${{ variables.azureDevOpsPool }} 
    #     azureServiceConnectionName: $(azure_service_principal_name)
    #     terraformVersion: ${{ variables.terraformVersion }}
    #     kubectlVersion: ${{ variables.kubectlVersion }}
    #     helmVersion: ${{ variables.helmVersion }}
    #     helmReleaseName: $(vertica_helm_release_name)
    #     helmNamespace: $(vertica_namespace)
    #     airflowNamespace: $(airflow_namespace)
    #     resourceGroupName: $(mainResourceGroupName)
    #     dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
    #     dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
    #     terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
    #     terraformSaName: ${{ variables.terraformSaName }}
    #     terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
    #     keyVaultName: ${{ variables.mainKeyVaultName }}
    #     keyVaultSecretNames: 
    #       - verticatlskey
    #       - verticatlscrt
    #       - verticatlscakey
    #       - verticatlscacrt
    #       - verticatlswebhookkey
    #       - verticatlswebhookcrt
    #       - verticasupassword
    #       - saverticakey
    #     saPublicAccessUpdate: false
    #     verticaTag: $(vertica_tag)      
    #     verticaLoggerTag: $(vertica_logger_tag)
    #     verticaOperatorTag: $(vertica_operator_tag)         
    #     enablersModule: ${{ variables.enablersModule }}
    #     infrastructureModule: ${{ variables.infrastructureModule }}
    #     condition: and(not(failed()), not(canceled()), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
    #     dependsOn:
    #       - databricks_cluster_restart

    - template: azure_pipelines/airflow-stages.yml
      parameters:
        pool: ${{ variables.azureDevOpsPool }} 
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        kubectlVersion: ${{ variables.kubectlVersion }}
        helmVersion: ${{ variables.helmVersion }}
        osmVersion: $(osm_version)
        dnsZoneSubscriptionID: $(private_dns_zone_subscription_id)
        dnsZoneResourceGroupName: $(private_dns_zone_resource_group)
        resourceGroupName: ${{ variables.mainResourceGroupName }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        keyVaultName: ${{ variables.mainKeyVaultName }}
        keyVaultSecretNames:
          # - verticadbwritername
          # - verticadbwriterpassword 
          - airflowoauthspnclientid
          - airflowoauthspnclientsecret
          - airflowtenantid     
          - psqlairflowuser
          - psqlairflowpwd
          - airflowfernetkey
          - airflowpwd 
          - ${{ variables.databricksAirflowPatTokenName }}
          - ${{ variables.saAirflowKeyName }}
          - clienttlskey
          - clienttlscrt
          - airflowsmtpclientsecret
          - airflowsmtpclientid
        saPublicAccessUpdate: false
        airflowTag: $(airflow_tag)
        pgBouncerTag: $(pg_bouncer_tag)
        envoySidecarHelperTag: $(envoy_helper_tag)
        helmReleaseName: $(airflow_helm_release_name)
        helmNamespace: $(airflow_namespace)
        ingressControllerName: $(ingress_helm_release_name)
        ingressControllerNamespace: $(ingress_namespace)
        # verticaNamespace: $(vertica_namespace)
        enablersModule: ${{ variables.enablersModule }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        contentModule: ${{ variables.contentModule }}
        databricksPatTokenName: ${{ variables.databricksAirflowPatTokenName }}
        airflowViewerGroupName: $(airflow_viewer_group_name)
        airflowUserGroupName: $(airflow_user_group_name)
        airflowAdminGroupName: $(airflow_admin_group_name)
        vnetPeered: $(terraform_in_vnet_peered)
        maxParallelDags: $(airflow_max_parallel_dags)
        maxConcurency: $(airflow_max_concurency)
        condition: and(not(canceled()), not(failed()), in(dependencies.databricks_cluster_restart.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          # - vertica_deployment
          - databricks_cluster_restart

    - template: azure_pipelines/databricks-run-notebooks-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName: ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        contentModule: ${{ variables.contentModule }}
        notebookName: ${{ variables.notebookName }}
        environmentName: $(terraform_in_environment_type)
        environmentNameUnityCatalogGroups: $(terraform_in_unity_catalog_environment_type)
        systemSchemaNames: $(terraform_in_databricks_schemas)
        storageAccountName: sa$(terraform_in_environment_type)$(terraform_in_project)$(terraform_in_location_short)dl
        databricksRemotePath: ${{ variables.databricksRemotePath }}
        databricksViewerGroups: $(databricks_system_job_viewer_groups)
        wheelsPackagesRemoteFileStore: ${{ variables.wheelsPackagesRemoteFileStore }}
        wheelsCsvFile: ${{ variables.csvFilePath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        workingDirectory: $(System.DefaultWorkingDirectory)
        pool: ${{ variables.azureDevOpsPool }}
        initCommonTables: ${{ parameters.initCommonTables }}
        forceDelete: ${{ parameters.forceDelete }}        
        condition: and(not(canceled()), not(failed()), in(dependencies.airflow_deployment.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - airflow_deployment
    
    - template: azure_pipelines/deploy-dags-steps.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName:  ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        downloadAirflowDags: ${{ variables.downloadAirflowDags }}
        dagsStorageAccount: $(terraform_out_sa_name_airflow)
        dagsRequirementsPath: ${{ variables.dagsRequirementsPath }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        sharedResourcesRepositoryCheckout: ${{ variables.sharedResourcesRepositoryCheckout }}
        pool: ${{ variables.azureDevOpsPool }}
        condition: and(not(canceled()), not(failed()), in(dependencies.databricks_run_notebook.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        dependsOn:
          - databricks_run_notebook

    - template: azure_pipelines/test-suite-multi-stages.yml
      parameters:
        azureServiceConnectionName: $(azure_service_principal_name)
        terraformVersion: ${{ variables.terraformVersion }}
        terraformResourceGroupName: ${{ variables.terraformResourceGroupName }}
        terraformSaName:  ${{ variables.terraformSaName }}
        terraformBackendContainerName: ${{ variables.terraformBackendContainerName }}
        mainResourceGroupName: ${{ variables.mainResourceGroupName }}
        kvTestSuiteResourceGroupName: $(kv_test_central_rg)
        enablersModule: ${{ variables.enablersModule }}
        infrastructureModule: ${{ variables.infrastructureModule }}
        contentModule: ${{ variables.contentModule }}
        mainKeyVaultName: ${{ variables.mainKeyVaultName }}
        mainKeyVaultSecretNames:
          - airflowdbwspclientid
          - airflowdbwspclientsecret
          - airflowpwd
        testKeyVaultName: $(kv_test_central_name)
        testKeyVaultSecretNames: 
          - airflowsptenantid
          - airflowtestuser
          - warehouseId
          - dbwresourceid
        saPublicAccessUpdate: false
        mavenOptions: >-
          -DairflowUrl=https://airflow.$(terraform_out_private_dns_zone_name_intrum)/api/v1 
          -DairflowUsername=$(airflowtestuser) 
          -DairflowPassword=$(airflowpwd) 
          -DdatabricksUrl=$(terraform_out_db_workspace_host)
          -DdataBricksClusterId=$(terraform_out_databricks_single_cluster_id)
          -DdataBricksWareHouseID=$(warehouseId)
          -DdataBricksConnCatalog=$(terraform_out_catalog_name)
          -DdataBricksDevopsClientId=$(airflowdbwspclientid)
          -DdataBricksDevopsSecret=$(airflowdbwspclientsecret)
          -DdataBricksSchemas=$(terraform_in_databricks_schemas)
          -DdataBricksResourceId=$(dbwresourceid)
          -DtenantId=$(airflowsptenantid)
          -DstorageAccount=$(terraform_out_sa_name_dl) 
          -DsaTempName=$(terraform_out_sa_name_temp) 
          -P ${{ variables.mavenProfile }}
        mavenPomFile: ${{ variables.mavenPomFile }}
        mavenGoal: ${{ variables.mavenGoal }}
        pool: ${{ variables.azureDevOpsPool }}
        testRepositoryCheckout: ${{ variables.testRepositoryCheckout }}
        devopsRepositoryCheckout: ${{ variables.devopsRepositoryCheckout }}
        condition: and(not(canceled()), not(failed()), in(dependencies.deploy_dags.result, 'Succeeded', 'Skipped', ''), not(and(${{ parameters.deployPairInfrastructure }}, not(variables['terraform_in_pair_paas']))))
        firstBlockProfiles: ['deployment_check']
        dependsOn:
          - deploy_dags